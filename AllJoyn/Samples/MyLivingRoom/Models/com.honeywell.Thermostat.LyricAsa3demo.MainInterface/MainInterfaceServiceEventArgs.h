//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace honeywell { namespace Thermostat { namespace LyricAsa3demo { namespace MainInterface {

// Methods
public ref class MainInterfaceSetTemperatureCalledEventArgs sealed
{
public:
    MainInterfaceSetTemperatureCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ double interfaceMemberTargetTemperatureTemperatureScale, _In_ int16 interfaceMemberInputArg);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MainInterfaceSetTemperatureResult^ Result
    {
        MainInterfaceSetTemperatureResult^ get() { return m_result; }
        void set(_In_ MainInterfaceSetTemperatureResult^ value) { m_result = value; }
    }

    property double TargetTemperatureTemperatureScale
    {
        double get() { return m_interfaceMemberTargetTemperatureTemperatureScale; }
    }

    property int16 InputArg
    {
        int16 get() { return m_interfaceMemberInputArg; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MainInterfaceSetTemperatureResult^>^ GetResultAsync(MainInterfaceSetTemperatureCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MainInterfaceSetTemperatureResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MainInterfaceSetTemperatureResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MainInterfaceSetTemperatureResult^ m_result;
    double m_interfaceMemberTargetTemperatureTemperatureScale;
    int16 m_interfaceMemberInputArg;
};

public ref class MainInterfaceSetTemperature68CalledEventArgs sealed
{
public:
    MainInterfaceSetTemperature68CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MainInterfaceSetTemperature68Result^ Result
    {
        MainInterfaceSetTemperature68Result^ get() { return m_result; }
        void set(_In_ MainInterfaceSetTemperature68Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MainInterfaceSetTemperature68Result^>^ GetResultAsync(MainInterfaceSetTemperature68CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MainInterfaceSetTemperature68Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MainInterfaceSetTemperature68Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MainInterfaceSetTemperature68Result^ m_result;
};

public ref class MainInterfaceSetTemperature70CalledEventArgs sealed
{
public:
    MainInterfaceSetTemperature70CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MainInterfaceSetTemperature70Result^ Result
    {
        MainInterfaceSetTemperature70Result^ get() { return m_result; }
        void set(_In_ MainInterfaceSetTemperature70Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MainInterfaceSetTemperature70Result^>^ GetResultAsync(MainInterfaceSetTemperature70CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MainInterfaceSetTemperature70Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MainInterfaceSetTemperature70Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MainInterfaceSetTemperature70Result^ m_result;
};

public ref class MainInterfaceSetTemperature72CalledEventArgs sealed
{
public:
    MainInterfaceSetTemperature72CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MainInterfaceSetTemperature72Result^ Result
    {
        MainInterfaceSetTemperature72Result^ get() { return m_result; }
        void set(_In_ MainInterfaceSetTemperature72Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MainInterfaceSetTemperature72Result^>^ GetResultAsync(MainInterfaceSetTemperature72CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MainInterfaceSetTemperature72Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MainInterfaceSetTemperature72Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MainInterfaceSetTemperature72Result^ m_result;
};

public ref class MainInterfaceSetTemperature74CalledEventArgs sealed
{
public:
    MainInterfaceSetTemperature74CalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MainInterfaceSetTemperature74Result^ Result
    {
        MainInterfaceSetTemperature74Result^ get() { return m_result; }
        void set(_In_ MainInterfaceSetTemperature74Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MainInterfaceSetTemperature74Result^>^ GetResultAsync(MainInterfaceSetTemperature74CalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MainInterfaceSetTemperature74Result^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MainInterfaceSetTemperature74Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MainInterfaceSetTemperature74Result^ m_result;
};

// Readable Properties
// Writable Properties
} } } } } 
