//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace net { namespace allplay { namespace MediaPlayer {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement IMediaPlayerService. Instead, MediaPlayerServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class MediaPlayerServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] IMediaPlayerService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerForcedPreviousCalledEventArgs^>^ ForcedPreviousCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerForcedPreviousCalledEventArgs^>^ handler) 
        { 
            return _ForcedPreviousCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerForcedPreviousCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ForcedPreviousCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerForcedPreviousCalledEventArgs^ args) 
        { 
            _ForcedPreviousCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetPlayerInfoCalledEventArgs^>^ GetPlayerInfoCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetPlayerInfoCalledEventArgs^>^ handler) 
        { 
            return _GetPlayerInfoCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerGetPlayerInfoCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetPlayerInfoCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerGetPlayerInfoCalledEventArgs^ args) 
        { 
            _GetPlayerInfoCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetPlaylistInfoCalledEventArgs^>^ GetPlaylistInfoCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetPlaylistInfoCalledEventArgs^>^ handler) 
        { 
            return _GetPlaylistInfoCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerGetPlaylistInfoCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetPlaylistInfoCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerGetPlaylistInfoCalledEventArgs^ args) 
        { 
            _GetPlaylistInfoCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerNextCalledEventArgs^>^ NextCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerNextCalledEventArgs^>^ handler) 
        { 
            return _NextCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerNextCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _NextCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerNextCalledEventArgs^ args) 
        { 
            _NextCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerPauseCalledEventArgs^>^ PauseCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerPauseCalledEventArgs^>^ handler) 
        { 
            return _PauseCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerPauseCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _PauseCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerPauseCalledEventArgs^ args) 
        { 
            _PauseCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerPlayCalledEventArgs^>^ PlayCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerPlayCalledEventArgs^>^ handler) 
        { 
            return _PlayCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerPlayCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _PlayCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerPlayCalledEventArgs^ args) 
        { 
            _PlayCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerPreviousCalledEventArgs^>^ PreviousCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerPreviousCalledEventArgs^>^ handler) 
        { 
            return _PreviousCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerPreviousCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _PreviousCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerPreviousCalledEventArgs^ args) 
        { 
            _PreviousCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerResumeCalledEventArgs^>^ ResumeCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerResumeCalledEventArgs^>^ handler) 
        { 
            return _ResumeCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerResumeCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ResumeCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerResumeCalledEventArgs^ args) 
        { 
            _ResumeCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerSetPositionCalledEventArgs^>^ SetPositionCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerSetPositionCalledEventArgs^>^ handler) 
        { 
            return _SetPositionCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerSetPositionCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetPositionCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerSetPositionCalledEventArgs^ args) 
        { 
            _SetPositionCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerStopCalledEventArgs^>^ StopCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerStopCalledEventArgs^>^ handler) 
        { 
            return _StopCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerStopCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _StopCalled -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerStopCalledEventArgs^ args) 
        { 
            _StopCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetEnabledControlsRequestedEventArgs^>^ GetEnabledControlsRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetEnabledControlsRequestedEventArgs^>^ handler) 
        { 
            return _GetEnabledControlsRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerGetEnabledControlsRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetEnabledControlsRequested -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerGetEnabledControlsRequestedEventArgs^ args) 
        { 
            _GetEnabledControlsRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetInterruptibleRequestedEventArgs^>^ GetInterruptibleRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetInterruptibleRequestedEventArgs^>^ handler) 
        { 
            return _GetInterruptibleRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerGetInterruptibleRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetInterruptibleRequested -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerGetInterruptibleRequestedEventArgs^ args) 
        { 
            _GetInterruptibleRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetLoopModeRequestedEventArgs^>^ GetLoopModeRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetLoopModeRequestedEventArgs^>^ handler) 
        { 
            return _GetLoopModeRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerGetLoopModeRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLoopModeRequested -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerGetLoopModeRequestedEventArgs^ args) 
        { 
            _GetLoopModeRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetShuffleModeRequestedEventArgs^>^ GetShuffleModeRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetShuffleModeRequestedEventArgs^>^ handler) 
        { 
            return _GetShuffleModeRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerGetShuffleModeRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetShuffleModeRequested -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerGetShuffleModeRequestedEventArgs^ args) 
        { 
            _GetShuffleModeRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetVersionRequestedEventArgs^>^ GetVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerGetVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerGetVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVersionRequested -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerGetVersionRequestedEventArgs^ args) 
        { 
            _GetVersionRequested(sender, args);
        } 
    }

    // Property Write Events
    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerSetLoopModeRequestedEventArgs^>^ SetLoopModeRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerSetLoopModeRequestedEventArgs^>^ handler) 
        { 
            return _SetLoopModeRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerSetLoopModeRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetLoopModeRequested -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerSetLoopModeRequestedEventArgs^ args) 
        { 
            _SetLoopModeRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerSetShuffleModeRequestedEventArgs^>^ SetShuffleModeRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerServiceEventAdapter^, MediaPlayerSetShuffleModeRequestedEventArgs^>^ handler) 
        { 
            return _SetShuffleModeRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerServiceEventAdapter^>(sender), safe_cast<MediaPlayerSetShuffleModeRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetShuffleModeRequested -= token; 
        } 
    internal: 
        void raise(MediaPlayerServiceEventAdapter^ sender, MediaPlayerSetShuffleModeRequestedEventArgs^ args) 
        { 
            _SetShuffleModeRequested(sender, args);
        } 
    }

    // IMediaPlayerService Implementation
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerForcedPreviousResult^>^ ForcedPreviousAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerGetPlayerInfoResult^>^ GetPlayerInfoAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerGetPlaylistInfoResult^>^ GetPlaylistInfoAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerNextResult^>^ NextAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerPauseResult^>^ PauseAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerPlayResult^>^ PlayAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 interfaceMemberItemIndex, _In_ int64 interfaceMemberStartPositionMsecs, _In_ bool interfaceMemberPauseStateOnly);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerPreviousResult^>^ PreviousAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerResumeResult^>^ ResumeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerSetPositionResult^>^ SetPositionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int64 interfaceMemberPositionMsecs);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerStopResult^>^ StopAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<MediaPlayerGetEnabledControlsResult^>^ GetEnabledControlsAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerGetInterruptibleResult^>^ GetInterruptibleAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerGetLoopModeResult^>^ GetLoopModeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerGetShuffleModeResult^>^ GetShuffleModeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerGetVersionResult^>^ GetVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<MediaPlayerSetLoopModeResult^>^ SetLoopModeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ value);
    virtual Windows::Foundation::IAsyncOperation<MediaPlayerSetShuffleModeResult^>^ SetShuffleModeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ value);

private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ForcedPreviousCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetPlayerInfoCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetPlaylistInfoCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _NextCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _PauseCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _PlayCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _PreviousCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ResumeCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetPositionCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _StopCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetEnabledControlsRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetInterruptibleRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLoopModeRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetShuffleModeRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVersionRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetLoopModeRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetShuffleModeRequested;
};

} } } 
