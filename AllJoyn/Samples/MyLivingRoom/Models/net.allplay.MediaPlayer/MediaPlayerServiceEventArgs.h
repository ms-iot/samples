//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace net { namespace allplay { namespace MediaPlayer {

// Methods
public ref class MediaPlayerForcedPreviousCalledEventArgs sealed
{
public:
    MediaPlayerForcedPreviousCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerForcedPreviousResult^ Result
    {
        MediaPlayerForcedPreviousResult^ get() { return m_result; }
        void set(_In_ MediaPlayerForcedPreviousResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerForcedPreviousResult^>^ GetResultAsync(MediaPlayerForcedPreviousCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerForcedPreviousResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerForcedPreviousResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerForcedPreviousResult^ m_result;
};

public ref class MediaPlayerGetPlayerInfoCalledEventArgs sealed
{
public:
    MediaPlayerGetPlayerInfoCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerGetPlayerInfoResult^ Result
    {
        MediaPlayerGetPlayerInfoResult^ get() { return m_result; }
        void set(_In_ MediaPlayerGetPlayerInfoResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerGetPlayerInfoResult^>^ GetResultAsync(MediaPlayerGetPlayerInfoCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerGetPlayerInfoResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerGetPlayerInfoResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerGetPlayerInfoResult^ m_result;
};

public ref class MediaPlayerGetPlaylistInfoCalledEventArgs sealed
{
public:
    MediaPlayerGetPlaylistInfoCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerGetPlaylistInfoResult^ Result
    {
        MediaPlayerGetPlaylistInfoResult^ get() { return m_result; }
        void set(_In_ MediaPlayerGetPlaylistInfoResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerGetPlaylistInfoResult^>^ GetResultAsync(MediaPlayerGetPlaylistInfoCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerGetPlaylistInfoResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerGetPlaylistInfoResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerGetPlaylistInfoResult^ m_result;
};

public ref class MediaPlayerNextCalledEventArgs sealed
{
public:
    MediaPlayerNextCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerNextResult^ Result
    {
        MediaPlayerNextResult^ get() { return m_result; }
        void set(_In_ MediaPlayerNextResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerNextResult^>^ GetResultAsync(MediaPlayerNextCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerNextResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerNextResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerNextResult^ m_result;
};

public ref class MediaPlayerPauseCalledEventArgs sealed
{
public:
    MediaPlayerPauseCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerPauseResult^ Result
    {
        MediaPlayerPauseResult^ get() { return m_result; }
        void set(_In_ MediaPlayerPauseResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerPauseResult^>^ GetResultAsync(MediaPlayerPauseCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerPauseResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerPauseResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerPauseResult^ m_result;
};

public ref class MediaPlayerPlayCalledEventArgs sealed
{
public:
    MediaPlayerPlayCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int32 interfaceMemberItemIndex, _In_ int64 interfaceMemberStartPositionMsecs, _In_ bool interfaceMemberPauseStateOnly);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerPlayResult^ Result
    {
        MediaPlayerPlayResult^ get() { return m_result; }
        void set(_In_ MediaPlayerPlayResult^ value) { m_result = value; }
    }

    property int32 ItemIndex
    {
        int32 get() { return m_interfaceMemberItemIndex; }
    }

    property int64 StartPositionMsecs
    {
        int64 get() { return m_interfaceMemberStartPositionMsecs; }
    }

    property bool PauseStateOnly
    {
        bool get() { return m_interfaceMemberPauseStateOnly; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerPlayResult^>^ GetResultAsync(MediaPlayerPlayCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerPlayResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerPlayResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerPlayResult^ m_result;
    int32 m_interfaceMemberItemIndex;
    int64 m_interfaceMemberStartPositionMsecs;
    bool m_interfaceMemberPauseStateOnly;
};

public ref class MediaPlayerPreviousCalledEventArgs sealed
{
public:
    MediaPlayerPreviousCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerPreviousResult^ Result
    {
        MediaPlayerPreviousResult^ get() { return m_result; }
        void set(_In_ MediaPlayerPreviousResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerPreviousResult^>^ GetResultAsync(MediaPlayerPreviousCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerPreviousResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerPreviousResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerPreviousResult^ m_result;
};

public ref class MediaPlayerResumeCalledEventArgs sealed
{
public:
    MediaPlayerResumeCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerResumeResult^ Result
    {
        MediaPlayerResumeResult^ get() { return m_result; }
        void set(_In_ MediaPlayerResumeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerResumeResult^>^ GetResultAsync(MediaPlayerResumeCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerResumeResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerResumeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerResumeResult^ m_result;
};

public ref class MediaPlayerSetPositionCalledEventArgs sealed
{
public:
    MediaPlayerSetPositionCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int64 interfaceMemberPositionMsecs);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerSetPositionResult^ Result
    {
        MediaPlayerSetPositionResult^ get() { return m_result; }
        void set(_In_ MediaPlayerSetPositionResult^ value) { m_result = value; }
    }

    property int64 PositionMsecs
    {
        int64 get() { return m_interfaceMemberPositionMsecs; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerSetPositionResult^>^ GetResultAsync(MediaPlayerSetPositionCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerSetPositionResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerSetPositionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerSetPositionResult^ m_result;
    int64 m_interfaceMemberPositionMsecs;
};

public ref class MediaPlayerStopCalledEventArgs sealed
{
public:
    MediaPlayerStopCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerStopResult^ Result
    {
        MediaPlayerStopResult^ get() { return m_result; }
        void set(_In_ MediaPlayerStopResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerStopResult^>^ GetResultAsync(MediaPlayerStopCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerStopResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerStopResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerStopResult^ m_result;
};

// Readable Properties
public ref class MediaPlayerGetEnabledControlsRequestedEventArgs sealed
{
public:
    MediaPlayerGetEnabledControlsRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerGetEnabledControlsResult^ Result
    {
        MediaPlayerGetEnabledControlsResult^ get() { return m_result; }
        void set(_In_ MediaPlayerGetEnabledControlsResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerGetEnabledControlsResult^>^ GetResultAsync(MediaPlayerGetEnabledControlsRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerGetEnabledControlsResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerGetEnabledControlsResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerGetEnabledControlsResult^ m_result;
};

public ref class MediaPlayerGetInterruptibleRequestedEventArgs sealed
{
public:
    MediaPlayerGetInterruptibleRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerGetInterruptibleResult^ Result
    {
        MediaPlayerGetInterruptibleResult^ get() { return m_result; }
        void set(_In_ MediaPlayerGetInterruptibleResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerGetInterruptibleResult^>^ GetResultAsync(MediaPlayerGetInterruptibleRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerGetInterruptibleResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerGetInterruptibleResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerGetInterruptibleResult^ m_result;
};

public ref class MediaPlayerGetLoopModeRequestedEventArgs sealed
{
public:
    MediaPlayerGetLoopModeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerGetLoopModeResult^ Result
    {
        MediaPlayerGetLoopModeResult^ get() { return m_result; }
        void set(_In_ MediaPlayerGetLoopModeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerGetLoopModeResult^>^ GetResultAsync(MediaPlayerGetLoopModeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerGetLoopModeResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerGetLoopModeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerGetLoopModeResult^ m_result;
};

public ref class MediaPlayerGetShuffleModeRequestedEventArgs sealed
{
public:
    MediaPlayerGetShuffleModeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerGetShuffleModeResult^ Result
    {
        MediaPlayerGetShuffleModeResult^ get() { return m_result; }
        void set(_In_ MediaPlayerGetShuffleModeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerGetShuffleModeResult^>^ GetResultAsync(MediaPlayerGetShuffleModeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerGetShuffleModeResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerGetShuffleModeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerGetShuffleModeResult^ m_result;
};

public ref class MediaPlayerGetVersionRequestedEventArgs sealed
{
public:
    MediaPlayerGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property MediaPlayerGetVersionResult^ Result
    {
        MediaPlayerGetVersionResult^ get() { return m_result; }
        void set(_In_ MediaPlayerGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<MediaPlayerGetVersionResult^>^ GetResultAsync(MediaPlayerGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    MediaPlayerGetVersionResult^ m_result;
};

// Writable Properties
public ref class MediaPlayerSetLoopModeRequestedEventArgs sealed
{
public:
    MediaPlayerSetLoopModeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property Platform::String^ Value
    {
        Platform::String^ get() { return m_value; }
    }

    property MediaPlayerSetLoopModeResult^ Result
    {
        MediaPlayerSetLoopModeResult^ get() { return m_result; }
        void set(_In_ MediaPlayerSetLoopModeResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<MediaPlayerSetLoopModeResult^>^ GetResultAsync(MediaPlayerSetLoopModeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerSetLoopModeResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerSetLoopModeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    Platform::String^ m_value;
    MediaPlayerSetLoopModeResult^ m_result;
};

public ref class MediaPlayerSetShuffleModeRequestedEventArgs sealed
{
public:
    MediaPlayerSetShuffleModeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property Platform::String^ Value
    {
        Platform::String^ get() { return m_value; }
    }

    property MediaPlayerSetShuffleModeResult^ Result
    {
        MediaPlayerSetShuffleModeResult^ get() { return m_result; }
        void set(_In_ MediaPlayerSetShuffleModeResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<MediaPlayerSetShuffleModeResult^>^ GetResultAsync(MediaPlayerSetShuffleModeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<MediaPlayerSetShuffleModeResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<MediaPlayerSetShuffleModeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    Platform::String^ m_value;
    MediaPlayerSetShuffleModeResult^ m_result;
};

} } } 
