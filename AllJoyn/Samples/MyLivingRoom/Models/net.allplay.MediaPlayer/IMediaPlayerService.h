//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace net { namespace allplay { namespace MediaPlayer {

public interface class IMediaPlayerService
{
public:
    // Implement this function to handle calls to the ForcedPrevious method.
    Windows::Foundation::IAsyncOperation<MediaPlayerForcedPreviousResult^>^ ForcedPreviousAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info );

    // Implement this function to handle calls to the GetPlayerInfo method.
    Windows::Foundation::IAsyncOperation<MediaPlayerGetPlayerInfoResult^>^ GetPlayerInfoAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info );

    // Implement this function to handle calls to the GetPlaylistInfo method.
    Windows::Foundation::IAsyncOperation<MediaPlayerGetPlaylistInfoResult^>^ GetPlaylistInfoAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info );

    // Implement this function to handle calls to the Next method.
    Windows::Foundation::IAsyncOperation<MediaPlayerNextResult^>^ NextAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info );

    // Implement this function to handle calls to the Pause method.
    Windows::Foundation::IAsyncOperation<MediaPlayerPauseResult^>^ PauseAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info );

    // Implement this function to handle calls to the Play method.
    Windows::Foundation::IAsyncOperation<MediaPlayerPlayResult^>^ PlayAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info , _In_ int32 interfaceMemberItemIndex, _In_ int64 interfaceMemberStartPositionMsecs, _In_ bool interfaceMemberPauseStateOnly);

    // Implement this function to handle calls to the Previous method.
    Windows::Foundation::IAsyncOperation<MediaPlayerPreviousResult^>^ PreviousAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info );

    // Implement this function to handle calls to the Resume method.
    Windows::Foundation::IAsyncOperation<MediaPlayerResumeResult^>^ ResumeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info );

    // Implement this function to handle calls to the SetPosition method.
    Windows::Foundation::IAsyncOperation<MediaPlayerSetPositionResult^>^ SetPositionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info , _In_ int64 interfaceMemberPositionMsecs);

    // Implement this function to handle calls to the Stop method.
    Windows::Foundation::IAsyncOperation<MediaPlayerStopResult^>^ StopAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info );

    // Implement this function to handle requests for the value of the EnabledControls property.
    //
    // Currently, info will always be null, because no information is available about the requestor.
    Windows::Foundation::IAsyncOperation<MediaPlayerGetEnabledControlsResult^>^ GetEnabledControlsAsync(Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    // Implement this function to handle requests for the value of the Interruptible property.
    //
    // Currently, info will always be null, because no information is available about the requestor.
    Windows::Foundation::IAsyncOperation<MediaPlayerGetInterruptibleResult^>^ GetInterruptibleAsync(Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    // Implement this function to handle requests for the value of the LoopMode property.
    //
    // Currently, info will always be null, because no information is available about the requestor.
    Windows::Foundation::IAsyncOperation<MediaPlayerGetLoopModeResult^>^ GetLoopModeAsync(Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    // Implement this function to handle requests to set the LoopMode property.
    //
    // Currently, info will always be null, because no information is available about the requestor.
    Windows::Foundation::IAsyncOperation<MediaPlayerSetLoopModeResult^>^ SetLoopModeAsync(Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, Platform::String^ value);

    // Implement this function to handle requests for the value of the ShuffleMode property.
    //
    // Currently, info will always be null, because no information is available about the requestor.
    Windows::Foundation::IAsyncOperation<MediaPlayerGetShuffleModeResult^>^ GetShuffleModeAsync(Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    // Implement this function to handle requests to set the ShuffleMode property.
    //
    // Currently, info will always be null, because no information is available about the requestor.
    Windows::Foundation::IAsyncOperation<MediaPlayerSetShuffleModeResult^>^ SetShuffleModeAsync(Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, Platform::String^ value);

    // Implement this function to handle requests for the value of the Version property.
    //
    // Currently, info will always be null, because no information is available about the requestor.
    Windows::Foundation::IAsyncOperation<MediaPlayerGetVersionResult^>^ GetVersionAsync(Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

};

} } } 
