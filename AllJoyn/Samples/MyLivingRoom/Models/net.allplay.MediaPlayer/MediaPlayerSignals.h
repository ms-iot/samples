//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace net { namespace allplay { namespace MediaPlayer {

ref class MediaPlayerSignals;

public interface class IMediaPlayerSignals
{
    event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerEnabledControlsChangedReceivedEventArgs^>^ EnabledControlsChangedReceived;
    event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerEndOfPlaybackReceivedEventArgs^>^ EndOfPlaybackReceived;
    event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerInterruptibleChangedReceivedEventArgs^>^ InterruptibleChangedReceived;
    event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerLoopModeChangedReceivedEventArgs^>^ LoopModeChangedReceived;
    event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerOnPlaybackErrorReceivedEventArgs^>^ OnPlaybackErrorReceived;
    event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerPlaylistChangedReceivedEventArgs^>^ PlaylistChangedReceived;
    event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerShuffleModeChangedReceivedEventArgs^>^ ShuffleModeChangedReceived;
};

public ref class MediaPlayerSignals sealed : [Windows::Foundation::Metadata::Default] IMediaPlayerSignals
{
public:
    // Calling this method will send the EnabledControlsChanged signal to every member of the session.
    void EnabledControlsChanged(_In_ Windows::Foundation::Collections::IMapView<Platform::String^,bool>^ interfaceMemberEnabledControls);

    // This event fires whenever the EnabledControlsChanged signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerEnabledControlsChangedReceivedEventArgs^>^ EnabledControlsChangedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerEnabledControlsChangedReceivedEventArgs^>^ handler) 
        { 
            return _EnabledControlsChangedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerSignals^>(sender), safe_cast<MediaPlayerEnabledControlsChangedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _EnabledControlsChangedReceived -= token; 
        } 
    internal: 
        void raise(MediaPlayerSignals^ sender, MediaPlayerEnabledControlsChangedReceivedEventArgs^ args) 
        { 
            _EnabledControlsChangedReceived(sender, args);
        } 
    }

    // Calling this method will send the EndOfPlayback signal to every member of the session.
    void EndOfPlayback();

    // This event fires whenever the EndOfPlayback signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerEndOfPlaybackReceivedEventArgs^>^ EndOfPlaybackReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerEndOfPlaybackReceivedEventArgs^>^ handler) 
        { 
            return _EndOfPlaybackReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerSignals^>(sender), safe_cast<MediaPlayerEndOfPlaybackReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _EndOfPlaybackReceived -= token; 
        } 
    internal: 
        void raise(MediaPlayerSignals^ sender, MediaPlayerEndOfPlaybackReceivedEventArgs^ args) 
        { 
            _EndOfPlaybackReceived(sender, args);
        } 
    }

    // Calling this method will send the InterruptibleChanged signal to every member of the session.
    void InterruptibleChanged(_In_ bool interfaceMemberInterruptible);

    // This event fires whenever the InterruptibleChanged signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerInterruptibleChangedReceivedEventArgs^>^ InterruptibleChangedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerInterruptibleChangedReceivedEventArgs^>^ handler) 
        { 
            return _InterruptibleChangedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerSignals^>(sender), safe_cast<MediaPlayerInterruptibleChangedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _InterruptibleChangedReceived -= token; 
        } 
    internal: 
        void raise(MediaPlayerSignals^ sender, MediaPlayerInterruptibleChangedReceivedEventArgs^ args) 
        { 
            _InterruptibleChangedReceived(sender, args);
        } 
    }

    // Calling this method will send the LoopModeChanged signal to every member of the session.
    void LoopModeChanged(_In_ Platform::String^ interfaceMemberLoopMode);

    // This event fires whenever the LoopModeChanged signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerLoopModeChangedReceivedEventArgs^>^ LoopModeChangedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerLoopModeChangedReceivedEventArgs^>^ handler) 
        { 
            return _LoopModeChangedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerSignals^>(sender), safe_cast<MediaPlayerLoopModeChangedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _LoopModeChangedReceived -= token; 
        } 
    internal: 
        void raise(MediaPlayerSignals^ sender, MediaPlayerLoopModeChangedReceivedEventArgs^ args) 
        { 
            _LoopModeChangedReceived(sender, args);
        } 
    }

    // Calling this method will send the OnPlaybackError signal to every member of the session.
    void OnPlaybackError(_In_ int32 interfaceMemberIndex, _In_ Platform::String^ interfaceMemberError, _In_ Platform::String^ interfaceMemberDescription);

    // This event fires whenever the OnPlaybackError signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerOnPlaybackErrorReceivedEventArgs^>^ OnPlaybackErrorReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerOnPlaybackErrorReceivedEventArgs^>^ handler) 
        { 
            return _OnPlaybackErrorReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerSignals^>(sender), safe_cast<MediaPlayerOnPlaybackErrorReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _OnPlaybackErrorReceived -= token; 
        } 
    internal: 
        void raise(MediaPlayerSignals^ sender, MediaPlayerOnPlaybackErrorReceivedEventArgs^ args) 
        { 
            _OnPlaybackErrorReceived(sender, args);
        } 
    }

    // Calling this method will send the PlaylistChanged signal to every member of the session.
    void PlaylistChanged();

    // This event fires whenever the PlaylistChanged signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerPlaylistChangedReceivedEventArgs^>^ PlaylistChangedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerPlaylistChangedReceivedEventArgs^>^ handler) 
        { 
            return _PlaylistChangedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerSignals^>(sender), safe_cast<MediaPlayerPlaylistChangedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _PlaylistChangedReceived -= token; 
        } 
    internal: 
        void raise(MediaPlayerSignals^ sender, MediaPlayerPlaylistChangedReceivedEventArgs^ args) 
        { 
            _PlaylistChangedReceived(sender, args);
        } 
    }

    // Calling this method will send the ShuffleModeChanged signal to every member of the session.
    void ShuffleModeChanged(_In_ Platform::String^ interfaceMemberShuffleMode);

    // This event fires whenever the ShuffleModeChanged signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerShuffleModeChangedReceivedEventArgs^>^ ShuffleModeChangedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MediaPlayerSignals^, MediaPlayerShuffleModeChangedReceivedEventArgs^>^ handler) 
        { 
            return _ShuffleModeChangedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MediaPlayerSignals^>(sender), safe_cast<MediaPlayerShuffleModeChangedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ShuffleModeChangedReceived -= token; 
        } 
    internal: 
        void raise(MediaPlayerSignals^ sender, MediaPlayerShuffleModeChangedReceivedEventArgs^ args) 
        { 
            _ShuffleModeChangedReceived(sender, args);
        } 
    }

internal:
    void Initialize(_In_ alljoyn_busobject busObject, _In_ alljoyn_sessionid sessionId);
    void CallEnabledControlsChangedReceived(_In_ MediaPlayerSignals^ sender, _In_ MediaPlayerEnabledControlsChangedReceivedEventArgs^ args);
    void CallEndOfPlaybackReceived(_In_ MediaPlayerSignals^ sender, _In_ MediaPlayerEndOfPlaybackReceivedEventArgs^ args);
    void CallInterruptibleChangedReceived(_In_ MediaPlayerSignals^ sender, _In_ MediaPlayerInterruptibleChangedReceivedEventArgs^ args);
    void CallLoopModeChangedReceived(_In_ MediaPlayerSignals^ sender, _In_ MediaPlayerLoopModeChangedReceivedEventArgs^ args);
    void CallOnPlaybackErrorReceived(_In_ MediaPlayerSignals^ sender, _In_ MediaPlayerOnPlaybackErrorReceivedEventArgs^ args);
    void CallPlaylistChangedReceived(_In_ MediaPlayerSignals^ sender, _In_ MediaPlayerPlaylistChangedReceivedEventArgs^ args);
    void CallShuffleModeChangedReceived(_In_ MediaPlayerSignals^ sender, _In_ MediaPlayerShuffleModeChangedReceivedEventArgs^ args);

private:
    alljoyn_busobject m_busObject;
    alljoyn_sessionid m_sessionId;

    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _EnabledControlsChangedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _EndOfPlaybackReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _InterruptibleChangedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _LoopModeChangedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _OnPlaybackErrorReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _PlaylistChangedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _ShuffleModeChangedReceived;

    alljoyn_interfacedescription_member m_memberEnabledControlsChanged;
    alljoyn_interfacedescription_member m_memberEndOfPlayback;
    alljoyn_interfacedescription_member m_memberInterruptibleChanged;
    alljoyn_interfacedescription_member m_memberLoopModeChanged;
    alljoyn_interfacedescription_member m_memberOnPlaybackError;
    alljoyn_interfacedescription_member m_memberPlaylistChanged;
    alljoyn_interfacedescription_member m_memberShuffleModeChanged;
};

} } } 
