//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace net { namespace allplay { namespace MediaPlayer {

public ref class MediaPlayerZoneInfo sealed
{
public:
    property Platform::String^ Value1
    {
        Platform::String^ get() { return m_value1; }
        void set(Platform::String^ value) { m_value1 = value; }
    }
     
    property int32 Value2
    {
        int32 get() { return m_value2; }
        void set(int32 value) { m_value2 = value; }
    }
     
    property Platform::Object^ Value3
    {
        Platform::Object^ get() { return m_value3; }
        void set(Platform::Object^ value) { m_value3 = value; }
    }
     
private:
    Platform::String^ m_value1;
    int32 m_value2;
    Platform::Object^ m_value3;
};

public ref class AllJoynMessageArgStructure sealed : Windows::Foundation::Collections::IVector<Platform::Object^>
{
public:
    AllJoynMessageArgStructure()
    {
        m_vector = ref new Platform::Collections::Vector<Platform::Object^>();
    }

    virtual Windows::Foundation::Collections::IIterator<Platform::Object^>^ First()
    {
        return m_vector->First();
    }

    virtual Platform::Object^ GetAt(unsigned int index)
    {
        return m_vector->GetAt(index);
    }

    virtual property unsigned int Size {
        virtual unsigned int get()
        {
            return m_vector->Size;
        }
    }

    virtual bool IndexOf(Platform::Object^ value, unsigned int * index)
    {
        return m_vector->IndexOf(value, index);
    }

    virtual unsigned int GetMany(unsigned int startIndex, Platform::WriteOnlyArray<Platform::Object^>^ items)
    {
        return m_vector->GetMany(startIndex, items);
    }

    virtual Windows::Foundation::Collections::IVectorView<Platform::Object^>^ GetView()
    {
        return m_vector->GetView();
    }

    virtual void SetAt(unsigned int index, Platform::Object^ value)
    {
        return m_vector->SetAt(index, value);
    }

    virtual void InsertAt(unsigned int index, Platform::Object^ value)
    {
        return m_vector->InsertAt(index, value);
    }

    virtual void Append(Platform::Object^ value)
    {
        return m_vector->Append(value);
    }

    virtual void RemoveAt(unsigned int index)
    {
        return m_vector->RemoveAt(index);
    }

    virtual void RemoveAtEnd()
    {
        return m_vector->RemoveAtEnd();
    }

    virtual void Clear()
    {
        return m_vector->Clear();
    }

    virtual void ReplaceAll(const Platform::Array<Platform::Object^>^ items)
    {
        return m_vector->ReplaceAll(items);
    }

private:
    Platform::Collections::Vector<Platform::Object^>^ m_vector;
};
} } } 

partial ref class TypeConversionHelpers
{
internal:
    static _Check_return_ int32 GetAllJoynMessageArg(_In_ alljoyn_msgarg argument, _In_ PCSTR signature, _Out_ net::allplay::MediaPlayer::MediaPlayerZoneInfo^* value)
    {
        UNREFERENCED_PARAMETER(signature);

        (*value) = ref new net::allplay::MediaPlayer::MediaPlayerZoneInfo();

        alljoyn_msgarg argument1;
        alljoyn_msgarg argument2;
        alljoyn_msgarg argument3;
        RETURN_IF_QSTATUS_ERROR(alljoyn_msgarg_get(argument, "(***)", &argument1, &argument2, &argument3));

        Platform::String^ value1;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument1, "s", &value1));
        (*value)->Value1 = value1;
        int32 value2;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument2, "i", &value2));
        (*value)->Value2 = value2;
        Platform::Object^ value3;
        RETURN_IF_QSTATUS_ERROR(GetAllJoynMessageArg(argument3, "v", &value3));
        (*value)->Value3 = value3;
        
        return ER_OK;
    }

    static _Check_return_ int32 SetAllJoynMessageArg(_In_ alljoyn_msgarg argument, _In_ PCSTR signature, _In_ net::allplay::MediaPlayer::MediaPlayerZoneInfo^ value)
    {
        UNREFERENCED_PARAMETER(signature);

        auto argument1 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument1, "s", value->Value1));
        auto argument2 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument2, "i", value->Value2));
        auto argument3 = alljoyn_msgarg_create();
        RETURN_IF_QSTATUS_ERROR(SetAllJoynMessageArg(argument3, "v", value->Value3));

        RETURN_IF_QSTATUS_ERROR(alljoyn_msgarg_set(argument, "(***)", argument1, argument2, argument3));
        alljoyn_msgarg_stabilize(argument);
        alljoyn_msgarg_destroy(argument1);
        alljoyn_msgarg_destroy(argument2);
        alljoyn_msgarg_destroy(argument3);

        return ER_OK;
    }

};
