//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace enocean { namespace Bridge { namespace RockerButton { namespace interface_1 {

// Methods
// Readable Properties
public ref class interface_1GetButtonA0RequestedEventArgs sealed
{
public:
    interface_1GetButtonA0RequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property interface_1GetButtonA0Result^ Result
    {
        interface_1GetButtonA0Result^ get() { return m_result; }
        void set(_In_ interface_1GetButtonA0Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<interface_1GetButtonA0Result^>^ GetResultAsync(interface_1GetButtonA0RequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<interface_1GetButtonA0Result^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<interface_1GetButtonA0Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    interface_1GetButtonA0Result^ m_result;
};

public ref class interface_1GetButtonAIRequestedEventArgs sealed
{
public:
    interface_1GetButtonAIRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property interface_1GetButtonAIResult^ Result
    {
        interface_1GetButtonAIResult^ get() { return m_result; }
        void set(_In_ interface_1GetButtonAIResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<interface_1GetButtonAIResult^>^ GetResultAsync(interface_1GetButtonAIRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<interface_1GetButtonAIResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<interface_1GetButtonAIResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    interface_1GetButtonAIResult^ m_result;
};

public ref class interface_1GetButtonB0RequestedEventArgs sealed
{
public:
    interface_1GetButtonB0RequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property interface_1GetButtonB0Result^ Result
    {
        interface_1GetButtonB0Result^ get() { return m_result; }
        void set(_In_ interface_1GetButtonB0Result^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<interface_1GetButtonB0Result^>^ GetResultAsync(interface_1GetButtonB0RequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<interface_1GetButtonB0Result^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<interface_1GetButtonB0Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    interface_1GetButtonB0Result^ m_result;
};

public ref class interface_1GetButtonBIRequestedEventArgs sealed
{
public:
    interface_1GetButtonBIRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property interface_1GetButtonBIResult^ Result
    {
        interface_1GetButtonBIResult^ get() { return m_result; }
        void set(_In_ interface_1GetButtonBIResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<interface_1GetButtonBIResult^>^ GetResultAsync(interface_1GetButtonBIRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<interface_1GetButtonBIResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<interface_1GetButtonBIResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    interface_1GetButtonBIResult^ m_result;
};

// Writable Properties
public ref class interface_1SetButtonA0RequestedEventArgs sealed
{
public:
    interface_1SetButtonA0RequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property Platform::String^ Value
    {
        Platform::String^ get() { return m_value; }
    }

    property interface_1SetButtonA0Result^ Result
    {
        interface_1SetButtonA0Result^ get() { return m_result; }
        void set(_In_ interface_1SetButtonA0Result^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<interface_1SetButtonA0Result^>^ GetResultAsync(interface_1SetButtonA0RequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<interface_1SetButtonA0Result^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<interface_1SetButtonA0Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    Platform::String^ m_value;
    interface_1SetButtonA0Result^ m_result;
};

public ref class interface_1SetButtonAIRequestedEventArgs sealed
{
public:
    interface_1SetButtonAIRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property Platform::String^ Value
    {
        Platform::String^ get() { return m_value; }
    }

    property interface_1SetButtonAIResult^ Result
    {
        interface_1SetButtonAIResult^ get() { return m_result; }
        void set(_In_ interface_1SetButtonAIResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<interface_1SetButtonAIResult^>^ GetResultAsync(interface_1SetButtonAIRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<interface_1SetButtonAIResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<interface_1SetButtonAIResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    Platform::String^ m_value;
    interface_1SetButtonAIResult^ m_result;
};

public ref class interface_1SetButtonB0RequestedEventArgs sealed
{
public:
    interface_1SetButtonB0RequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property Platform::String^ Value
    {
        Platform::String^ get() { return m_value; }
    }

    property interface_1SetButtonB0Result^ Result
    {
        interface_1SetButtonB0Result^ get() { return m_result; }
        void set(_In_ interface_1SetButtonB0Result^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<interface_1SetButtonB0Result^>^ GetResultAsync(interface_1SetButtonB0RequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<interface_1SetButtonB0Result^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<interface_1SetButtonB0Result^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    Platform::String^ m_value;
    interface_1SetButtonB0Result^ m_result;
};

public ref class interface_1SetButtonBIRequestedEventArgs sealed
{
public:
    interface_1SetButtonBIRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property Platform::String^ Value
    {
        Platform::String^ get() { return m_value; }
    }

    property interface_1SetButtonBIResult^ Result
    {
        interface_1SetButtonBIResult^ get() { return m_result; }
        void set(_In_ interface_1SetButtonBIResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<interface_1SetButtonBIResult^>^ GetResultAsync(interface_1SetButtonBIRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<interface_1SetButtonBIResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<interface_1SetButtonBIResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    Platform::String^ m_value;
    interface_1SetButtonBIResult^ m_result;
};

} } } } } 
