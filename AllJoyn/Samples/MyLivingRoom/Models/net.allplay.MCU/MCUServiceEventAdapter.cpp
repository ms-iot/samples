//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#include "pch.h"

using namespace Microsoft::WRL;
using namespace Platform;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;
using namespace Windows::Devices::AllJoyn;
using namespace net::allplay::MCU;

// Note: Unlike an Interface implementation, which provides a single handler for each member, the event
// model allows for 0 or more listeners to be registered. The EventAdapter implementation deals with this
// difference by implementing a last-writer-wins policy. The lack of any return value (i.e., 0 listeners)
// is handled by returning a null result.

// Methods
IAsyncOperation<MCUAdvanceLoopModeResult^>^ MCUServiceEventAdapter::AdvanceLoopModeAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new MCUAdvanceLoopModeCalledEventArgs(info);
    AdvanceLoopModeCalled(this, args);
    return MCUAdvanceLoopModeCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<MCUGetCurrentItemUrlResult^>^ MCUServiceEventAdapter::GetCurrentItemUrlAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new MCUGetCurrentItemUrlCalledEventArgs(info);
    GetCurrentItemUrlCalled(this, args);
    return MCUGetCurrentItemUrlCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<MCUPlayItemResult^>^ MCUServiceEventAdapter::PlayItemAsync(_In_ AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberUrl, _In_ Platform::String^ interfaceMemberTitle, _In_ Platform::String^ interfaceMemberArtist, _In_ Platform::String^ interfaceMemberThumbnailUrl, _In_ int64 interfaceMemberDuration, _In_ Platform::String^ interfaceMemberAlbum, _In_ Platform::String^ interfaceMemberGenre)
{
    auto args = ref new MCUPlayItemCalledEventArgs(info, interfaceMemberUrl, interfaceMemberTitle, interfaceMemberArtist, interfaceMemberThumbnailUrl, interfaceMemberDuration, interfaceMemberAlbum, interfaceMemberGenre);
    PlayItemCalled(this, args);
    return MCUPlayItemCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<MCUSetExternalSourceResult^>^ MCUServiceEventAdapter::SetExternalSourceAsync(_In_ AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberName, _In_ bool interfaceMemberInterruptible, _In_ bool interfaceMemberVolumeCtrlEnabled)
{
    auto args = ref new MCUSetExternalSourceCalledEventArgs(info, interfaceMemberName, interfaceMemberInterruptible, interfaceMemberVolumeCtrlEnabled);
    SetExternalSourceCalled(this, args);
    return MCUSetExternalSourceCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<MCUToggleShuffleModeResult^>^ MCUServiceEventAdapter::ToggleShuffleModeAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new MCUToggleShuffleModeCalledEventArgs(info);
    ToggleShuffleModeCalled(this, args);
    return MCUToggleShuffleModeCalledEventArgs::GetResultAsync(args);
}

// Property Reads
IAsyncOperation<MCUGetVersionResult^>^ MCUServiceEventAdapter::GetVersionAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new MCUGetVersionRequestedEventArgs(info);
    GetVersionRequested(this, args);
    return MCUGetVersionRequestedEventArgs::GetResultAsync(args);
}

// Property Writes
