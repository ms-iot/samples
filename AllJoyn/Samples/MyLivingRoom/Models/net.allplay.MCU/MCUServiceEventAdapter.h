//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace net { namespace allplay { namespace MCU {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement IMCUService. Instead, MCUServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class MCUServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] IMCUService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUAdvanceLoopModeCalledEventArgs^>^ AdvanceLoopModeCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUAdvanceLoopModeCalledEventArgs^>^ handler) 
        { 
            return _AdvanceLoopModeCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MCUServiceEventAdapter^>(sender), safe_cast<MCUAdvanceLoopModeCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _AdvanceLoopModeCalled -= token; 
        } 
    internal: 
        void raise(MCUServiceEventAdapter^ sender, MCUAdvanceLoopModeCalledEventArgs^ args) 
        { 
            _AdvanceLoopModeCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUGetCurrentItemUrlCalledEventArgs^>^ GetCurrentItemUrlCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUGetCurrentItemUrlCalledEventArgs^>^ handler) 
        { 
            return _GetCurrentItemUrlCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MCUServiceEventAdapter^>(sender), safe_cast<MCUGetCurrentItemUrlCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetCurrentItemUrlCalled -= token; 
        } 
    internal: 
        void raise(MCUServiceEventAdapter^ sender, MCUGetCurrentItemUrlCalledEventArgs^ args) 
        { 
            _GetCurrentItemUrlCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUPlayItemCalledEventArgs^>^ PlayItemCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUPlayItemCalledEventArgs^>^ handler) 
        { 
            return _PlayItemCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MCUServiceEventAdapter^>(sender), safe_cast<MCUPlayItemCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _PlayItemCalled -= token; 
        } 
    internal: 
        void raise(MCUServiceEventAdapter^ sender, MCUPlayItemCalledEventArgs^ args) 
        { 
            _PlayItemCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUSetExternalSourceCalledEventArgs^>^ SetExternalSourceCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUSetExternalSourceCalledEventArgs^>^ handler) 
        { 
            return _SetExternalSourceCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MCUServiceEventAdapter^>(sender), safe_cast<MCUSetExternalSourceCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetExternalSourceCalled -= token; 
        } 
    internal: 
        void raise(MCUServiceEventAdapter^ sender, MCUSetExternalSourceCalledEventArgs^ args) 
        { 
            _SetExternalSourceCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUToggleShuffleModeCalledEventArgs^>^ ToggleShuffleModeCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUToggleShuffleModeCalledEventArgs^>^ handler) 
        { 
            return _ToggleShuffleModeCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MCUServiceEventAdapter^>(sender), safe_cast<MCUToggleShuffleModeCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _ToggleShuffleModeCalled -= token; 
        } 
    internal: 
        void raise(MCUServiceEventAdapter^ sender, MCUToggleShuffleModeCalledEventArgs^ args) 
        { 
            _ToggleShuffleModeCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUGetVersionRequestedEventArgs^>^ GetVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<MCUServiceEventAdapter^, MCUGetVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<MCUServiceEventAdapter^>(sender), safe_cast<MCUGetVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVersionRequested -= token; 
        } 
    internal: 
        void raise(MCUServiceEventAdapter^ sender, MCUGetVersionRequestedEventArgs^ args) 
        { 
            _GetVersionRequested(sender, args);
        } 
    }

    // Property Write Events
    // IMCUService Implementation
    virtual Windows::Foundation::IAsyncOperation<MCUAdvanceLoopModeResult^>^ AdvanceLoopModeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MCUGetCurrentItemUrlResult^>^ GetCurrentItemUrlAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<MCUPlayItemResult^>^ PlayItemAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberUrl, _In_ Platform::String^ interfaceMemberTitle, _In_ Platform::String^ interfaceMemberArtist, _In_ Platform::String^ interfaceMemberThumbnailUrl, _In_ int64 interfaceMemberDuration, _In_ Platform::String^ interfaceMemberAlbum, _In_ Platform::String^ interfaceMemberGenre);
    virtual Windows::Foundation::IAsyncOperation<MCUSetExternalSourceResult^>^ SetExternalSourceAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberName, _In_ bool interfaceMemberInterruptible, _In_ bool interfaceMemberVolumeCtrlEnabled);
    virtual Windows::Foundation::IAsyncOperation<MCUToggleShuffleModeResult^>^ ToggleShuffleModeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<MCUGetVersionResult^>^ GetVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);


private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _AdvanceLoopModeCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetCurrentItemUrlCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _PlayItemCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetExternalSourceCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _ToggleShuffleModeCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVersionRequested;
};

} } } 
