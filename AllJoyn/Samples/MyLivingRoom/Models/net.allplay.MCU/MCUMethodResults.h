//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

using namespace concurrency;

namespace net { namespace allplay { namespace MCU {

ref class MCUConsumer;

public ref class MCUAdvanceLoopModeResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static MCUAdvanceLoopModeResult^ CreateSuccessResult()
    {
        auto result = ref new MCUAdvanceLoopModeResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static MCUAdvanceLoopModeResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new MCUAdvanceLoopModeResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class MCUGetCurrentItemUrlResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property Platform::String^ Url
    {
        Platform::String^ get() { return m_interfaceMemberUrl; }
    internal:
        void set(_In_ Platform::String^ value) { m_interfaceMemberUrl = value; }
    }
    
    static MCUGetCurrentItemUrlResult^ CreateSuccessResult(_In_ Platform::String^ interfaceMemberUrl)
    {
        auto result = ref new MCUGetCurrentItemUrlResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Url = interfaceMemberUrl;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static MCUGetCurrentItemUrlResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new MCUGetCurrentItemUrlResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    Platform::String^ m_interfaceMemberUrl;
};

public ref class MCUPlayItemResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static MCUPlayItemResult^ CreateSuccessResult()
    {
        auto result = ref new MCUPlayItemResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static MCUPlayItemResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new MCUPlayItemResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class MCUSetExternalSourceResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static MCUSetExternalSourceResult^ CreateSuccessResult()
    {
        auto result = ref new MCUSetExternalSourceResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static MCUSetExternalSourceResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new MCUSetExternalSourceResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class MCUToggleShuffleModeResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static MCUToggleShuffleModeResult^ CreateSuccessResult()
    {
        auto result = ref new MCUToggleShuffleModeResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static MCUToggleShuffleModeResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new MCUToggleShuffleModeResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class MCUJoinSessionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property MCUConsumer^ Consumer
    {
        MCUConsumer^ get() { return m_consumer; }
    internal:
        void set(_In_ MCUConsumer^ value) { m_consumer = value; }
    };

private:
    int32 m_status;
    MCUConsumer^ m_consumer;
};

public ref class MCUGetVersionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint16 Version
    {
        uint16 get() { return m_value; }
    internal:
        void set(_In_ uint16 value) { m_value = value; }
    }

    static MCUGetVersionResult^ CreateSuccessResult(_In_ uint16 value)
    {
        auto result = ref new MCUGetVersionResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Version = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static MCUGetVersionResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new MCUGetVersionResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint16 m_value;
};

} } } 
