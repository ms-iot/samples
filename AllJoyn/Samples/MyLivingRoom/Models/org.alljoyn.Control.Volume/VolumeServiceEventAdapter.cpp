//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#include "pch.h"

using namespace Microsoft::WRL;
using namespace Platform;
using namespace Windows::Foundation;
using namespace Windows::Foundation::Collections;
using namespace Windows::Devices::AllJoyn;
using namespace org::alljoyn::Control::Volume;

// Note: Unlike an Interface implementation, which provides a single handler for each member, the event
// model allows for 0 or more listeners to be registered. The EventAdapter implementation deals with this
// difference by implementing a last-writer-wins policy. The lack of any return value (i.e., 0 listeners)
// is handled by returning a null result.

// Methods
IAsyncOperation<VolumeAdjustVolumeResult^>^ VolumeServiceEventAdapter::AdjustVolumeAsync(_In_ AllJoynMessageInfo^ info, _In_ int16 interfaceMemberDelta)
{
    auto args = ref new VolumeAdjustVolumeCalledEventArgs(info, interfaceMemberDelta);
    AdjustVolumeCalled(this, args);
    return VolumeAdjustVolumeCalledEventArgs::GetResultAsync(args);
}

IAsyncOperation<VolumeAdjustVolumePercentResult^>^ VolumeServiceEventAdapter::AdjustVolumePercentAsync(_In_ AllJoynMessageInfo^ info, _In_ double interfaceMemberChange)
{
    auto args = ref new VolumeAdjustVolumePercentCalledEventArgs(info, interfaceMemberChange);
    AdjustVolumePercentCalled(this, args);
    return VolumeAdjustVolumePercentCalledEventArgs::GetResultAsync(args);
}

// Property Reads
IAsyncOperation<VolumeGetEnabledResult^>^ VolumeServiceEventAdapter::GetEnabledAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new VolumeGetEnabledRequestedEventArgs(info);
    GetEnabledRequested(this, args);
    return VolumeGetEnabledRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<VolumeGetMuteResult^>^ VolumeServiceEventAdapter::GetMuteAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new VolumeGetMuteRequestedEventArgs(info);
    GetMuteRequested(this, args);
    return VolumeGetMuteRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<VolumeGetVersionResult^>^ VolumeServiceEventAdapter::GetVersionAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new VolumeGetVersionRequestedEventArgs(info);
    GetVersionRequested(this, args);
    return VolumeGetVersionRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<VolumeGetVolumeResult^>^ VolumeServiceEventAdapter::GetVolumeAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new VolumeGetVolumeRequestedEventArgs(info);
    GetVolumeRequested(this, args);
    return VolumeGetVolumeRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<VolumeGetVolumeRangeResult^>^ VolumeServiceEventAdapter::GetVolumeRangeAsync(_In_ AllJoynMessageInfo^ info)
{
    auto args = ref new VolumeGetVolumeRangeRequestedEventArgs(info);
    GetVolumeRangeRequested(this, args);
    return VolumeGetVolumeRangeRequestedEventArgs::GetResultAsync(args);
}

// Property Writes
IAsyncOperation<VolumeSetMuteResult^>^ VolumeServiceEventAdapter::SetMuteAsync(_In_ AllJoynMessageInfo^ info, _In_ bool value)
{
    auto args = ref new VolumeSetMuteRequestedEventArgs(info, value);
    SetMuteRequested(this, args);
    return VolumeSetMuteRequestedEventArgs::GetResultAsync(args);
}

IAsyncOperation<VolumeSetVolumeResult^>^ VolumeServiceEventAdapter::SetVolumeAsync(_In_ AllJoynMessageInfo^ info, _In_ int16 value)
{
    auto args = ref new VolumeSetVolumeRequestedEventArgs(info, value);
    SetVolumeRequested(this, args);
    return VolumeSetVolumeRequestedEventArgs::GetResultAsync(args);
}

