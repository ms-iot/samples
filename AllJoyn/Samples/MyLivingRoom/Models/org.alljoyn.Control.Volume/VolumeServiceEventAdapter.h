//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace org { namespace alljoyn { namespace Control { namespace Volume {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement IVolumeService. Instead, VolumeServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class VolumeServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] IVolumeService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeAdjustVolumeCalledEventArgs^>^ AdjustVolumeCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeAdjustVolumeCalledEventArgs^>^ handler) 
        { 
            return _AdjustVolumeCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<VolumeServiceEventAdapter^>(sender), safe_cast<VolumeAdjustVolumeCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _AdjustVolumeCalled -= token; 
        } 
    internal: 
        void raise(VolumeServiceEventAdapter^ sender, VolumeAdjustVolumeCalledEventArgs^ args) 
        { 
            _AdjustVolumeCalled(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeAdjustVolumePercentCalledEventArgs^>^ AdjustVolumePercentCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeAdjustVolumePercentCalledEventArgs^>^ handler) 
        { 
            return _AdjustVolumePercentCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<VolumeServiceEventAdapter^>(sender), safe_cast<VolumeAdjustVolumePercentCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _AdjustVolumePercentCalled -= token; 
        } 
    internal: 
        void raise(VolumeServiceEventAdapter^ sender, VolumeAdjustVolumePercentCalledEventArgs^ args) 
        { 
            _AdjustVolumePercentCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetEnabledRequestedEventArgs^>^ GetEnabledRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetEnabledRequestedEventArgs^>^ handler) 
        { 
            return _GetEnabledRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<VolumeServiceEventAdapter^>(sender), safe_cast<VolumeGetEnabledRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetEnabledRequested -= token; 
        } 
    internal: 
        void raise(VolumeServiceEventAdapter^ sender, VolumeGetEnabledRequestedEventArgs^ args) 
        { 
            _GetEnabledRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetMuteRequestedEventArgs^>^ GetMuteRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetMuteRequestedEventArgs^>^ handler) 
        { 
            return _GetMuteRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<VolumeServiceEventAdapter^>(sender), safe_cast<VolumeGetMuteRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetMuteRequested -= token; 
        } 
    internal: 
        void raise(VolumeServiceEventAdapter^ sender, VolumeGetMuteRequestedEventArgs^ args) 
        { 
            _GetMuteRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetVersionRequestedEventArgs^>^ GetVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<VolumeServiceEventAdapter^>(sender), safe_cast<VolumeGetVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVersionRequested -= token; 
        } 
    internal: 
        void raise(VolumeServiceEventAdapter^ sender, VolumeGetVersionRequestedEventArgs^ args) 
        { 
            _GetVersionRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetVolumeRequestedEventArgs^>^ GetVolumeRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetVolumeRequestedEventArgs^>^ handler) 
        { 
            return _GetVolumeRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<VolumeServiceEventAdapter^>(sender), safe_cast<VolumeGetVolumeRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVolumeRequested -= token; 
        } 
    internal: 
        void raise(VolumeServiceEventAdapter^ sender, VolumeGetVolumeRequestedEventArgs^ args) 
        { 
            _GetVolumeRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetVolumeRangeRequestedEventArgs^>^ GetVolumeRangeRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeGetVolumeRangeRequestedEventArgs^>^ handler) 
        { 
            return _GetVolumeRangeRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<VolumeServiceEventAdapter^>(sender), safe_cast<VolumeGetVolumeRangeRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVolumeRangeRequested -= token; 
        } 
    internal: 
        void raise(VolumeServiceEventAdapter^ sender, VolumeGetVolumeRangeRequestedEventArgs^ args) 
        { 
            _GetVolumeRangeRequested(sender, args);
        } 
    }

    // Property Write Events
    event Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeSetMuteRequestedEventArgs^>^ SetMuteRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeSetMuteRequestedEventArgs^>^ handler) 
        { 
            return _SetMuteRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<VolumeServiceEventAdapter^>(sender), safe_cast<VolumeSetMuteRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetMuteRequested -= token; 
        } 
    internal: 
        void raise(VolumeServiceEventAdapter^ sender, VolumeSetMuteRequestedEventArgs^ args) 
        { 
            _SetMuteRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeSetVolumeRequestedEventArgs^>^ SetVolumeRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<VolumeServiceEventAdapter^, VolumeSetVolumeRequestedEventArgs^>^ handler) 
        { 
            return _SetVolumeRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<VolumeServiceEventAdapter^>(sender), safe_cast<VolumeSetVolumeRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetVolumeRequested -= token; 
        } 
    internal: 
        void raise(VolumeServiceEventAdapter^ sender, VolumeSetVolumeRequestedEventArgs^ args) 
        { 
            _SetVolumeRequested(sender, args);
        } 
    }

    // IVolumeService Implementation
    virtual Windows::Foundation::IAsyncOperation<VolumeAdjustVolumeResult^>^ AdjustVolumeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int16 interfaceMemberDelta);
    virtual Windows::Foundation::IAsyncOperation<VolumeAdjustVolumePercentResult^>^ AdjustVolumePercentAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ double interfaceMemberChange);

    virtual Windows::Foundation::IAsyncOperation<VolumeGetEnabledResult^>^ GetEnabledAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<VolumeGetMuteResult^>^ GetMuteAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<VolumeGetVersionResult^>^ GetVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<VolumeGetVolumeResult^>^ GetVolumeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<VolumeGetVolumeRangeResult^>^ GetVolumeRangeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<VolumeSetMuteResult^>^ SetMuteAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool value);
    virtual Windows::Foundation::IAsyncOperation<VolumeSetVolumeResult^>^ SetVolumeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ int16 value);

private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _AdjustVolumeCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _AdjustVolumePercentCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetEnabledRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetMuteRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVersionRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVolumeRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVolumeRangeRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetMuteRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetVolumeRequested;
};

} } } } 
