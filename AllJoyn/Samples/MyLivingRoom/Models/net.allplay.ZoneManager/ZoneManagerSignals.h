//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace net { namespace allplay { namespace ZoneManager {

ref class ZoneManagerSignals;

public interface class IZoneManagerSignals
{
    event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerEnabledChangedReceivedEventArgs^>^ EnabledChangedReceived;
    event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerOnZoneChangedReceivedEventArgs^>^ OnZoneChangedReceived;
    event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerPlayerReadyReceivedEventArgs^>^ PlayerReadyReceived;
    event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerSlaveOutOfDataReceivedEventArgs^>^ SlaveOutOfDataReceived;
    event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerSlaveStateReceivedEventArgs^>^ SlaveStateReceived;
};

public ref class ZoneManagerSignals sealed : [Windows::Foundation::Metadata::Default] IZoneManagerSignals
{
public:
    // Calling this method will send the EnabledChanged signal to every member of the session.
    void EnabledChanged(_In_ bool interfaceMemberEnabled);

    // This event fires whenever the EnabledChanged signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerEnabledChangedReceivedEventArgs^>^ EnabledChangedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerEnabledChangedReceivedEventArgs^>^ handler) 
        { 
            return _EnabledChangedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<ZoneManagerSignals^>(sender), safe_cast<ZoneManagerEnabledChangedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _EnabledChangedReceived -= token; 
        } 
    internal: 
        void raise(ZoneManagerSignals^ sender, ZoneManagerEnabledChangedReceivedEventArgs^ args) 
        { 
            _EnabledChangedReceived(sender, args);
        } 
    }

    // Calling this method will send the OnZoneChanged signal to every member of the session.
    void OnZoneChanged(_In_ Platform::String^ interfaceMemberZoneId, _In_ int32 interfaceMemberTimestamp, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,int32>^ interfaceMemberSlaves);

    // This event fires whenever the OnZoneChanged signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerOnZoneChangedReceivedEventArgs^>^ OnZoneChangedReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerOnZoneChangedReceivedEventArgs^>^ handler) 
        { 
            return _OnZoneChangedReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<ZoneManagerSignals^>(sender), safe_cast<ZoneManagerOnZoneChangedReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _OnZoneChangedReceived -= token; 
        } 
    internal: 
        void raise(ZoneManagerSignals^ sender, ZoneManagerOnZoneChangedReceivedEventArgs^ args) 
        { 
            _OnZoneChangedReceived(sender, args);
        } 
    }

    // Calling this method will send the PlayerReady signal to every member of the session.
    void PlayerReady(_In_ uint64 interfaceMemberResumeLatency);

    // This event fires whenever the PlayerReady signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerPlayerReadyReceivedEventArgs^>^ PlayerReadyReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerPlayerReadyReceivedEventArgs^>^ handler) 
        { 
            return _PlayerReadyReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<ZoneManagerSignals^>(sender), safe_cast<ZoneManagerPlayerReadyReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _PlayerReadyReceived -= token; 
        } 
    internal: 
        void raise(ZoneManagerSignals^ sender, ZoneManagerPlayerReadyReceivedEventArgs^ args) 
        { 
            _PlayerReadyReceived(sender, args);
        } 
    }

    // Calling this method will send the SlaveOutOfData signal to every member of the session.
    void SlaveOutOfData();

    // This event fires whenever the SlaveOutOfData signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerSlaveOutOfDataReceivedEventArgs^>^ SlaveOutOfDataReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerSlaveOutOfDataReceivedEventArgs^>^ handler) 
        { 
            return _SlaveOutOfDataReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<ZoneManagerSignals^>(sender), safe_cast<ZoneManagerSlaveOutOfDataReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SlaveOutOfDataReceived -= token; 
        } 
    internal: 
        void raise(ZoneManagerSignals^ sender, ZoneManagerSlaveOutOfDataReceivedEventArgs^ args) 
        { 
            _SlaveOutOfDataReceived(sender, args);
        } 
    }

    // Calling this method will send the SlaveState signal to every member of the session.
    void SlaveState(_In_ int32 interfaceMemberTimestamp, _In_ Platform::String^ interfaceMemberState, _In_ Platform::String^ interfaceMemberUrl, _In_ uint64 interfaceMemberStartTime, _In_ uint64 interfaceMemberCurrentPosition, _In_ Platform::String^ interfaceMemberNextStream);

    // This event fires whenever the SlaveState signal is sent by another member of the session.
    virtual event Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerSlaveStateReceivedEventArgs^>^ SlaveStateReceived 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<ZoneManagerSignals^, ZoneManagerSlaveStateReceivedEventArgs^>^ handler) 
        { 
            return _SlaveStateReceived += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<ZoneManagerSignals^>(sender), safe_cast<ZoneManagerSlaveStateReceivedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SlaveStateReceived -= token; 
        } 
    internal: 
        void raise(ZoneManagerSignals^ sender, ZoneManagerSlaveStateReceivedEventArgs^ args) 
        { 
            _SlaveStateReceived(sender, args);
        } 
    }

internal:
    void Initialize(_In_ alljoyn_busobject busObject, _In_ alljoyn_sessionid sessionId);
    void CallEnabledChangedReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerEnabledChangedReceivedEventArgs^ args);
    void CallOnZoneChangedReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerOnZoneChangedReceivedEventArgs^ args);
    void CallPlayerReadyReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerPlayerReadyReceivedEventArgs^ args);
    void CallSlaveOutOfDataReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerSlaveOutOfDataReceivedEventArgs^ args);
    void CallSlaveStateReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerSlaveStateReceivedEventArgs^ args);

private:
    alljoyn_busobject m_busObject;
    alljoyn_sessionid m_sessionId;

    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _EnabledChangedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _OnZoneChangedReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _PlayerReadyReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SlaveOutOfDataReceived;
    virtual event Windows::Foundation::EventHandler<Platform::Object^>^ _SlaveStateReceived;

    alljoyn_interfacedescription_member m_memberEnabledChanged;
    alljoyn_interfacedescription_member m_memberOnZoneChanged;
    alljoyn_interfacedescription_member m_memberPlayerReady;
    alljoyn_interfacedescription_member m_memberSlaveOutOfData;
    alljoyn_interfacedescription_member m_memberSlaveState;
};

} } } 
