//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace net { namespace allplay { namespace ZoneManager {

// Methods
public ref class ZoneManagerCreateZoneCalledEventArgs sealed
{
public:
    ZoneManagerCreateZoneCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Windows::Foundation::Collections::IVectorView<Platform::String^>^ interfaceMemberSlaves);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ZoneManagerCreateZoneResult^ Result
    {
        ZoneManagerCreateZoneResult^ get() { return m_result; }
        void set(_In_ ZoneManagerCreateZoneResult^ value) { m_result = value; }
    }

    property Windows::Foundation::Collections::IVectorView<Platform::String^>^ Slaves
    {
        Windows::Foundation::Collections::IVectorView<Platform::String^>^ get() { return m_interfaceMemberSlaves; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ZoneManagerCreateZoneResult^>^ GetResultAsync(ZoneManagerCreateZoneCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ZoneManagerCreateZoneResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ZoneManagerCreateZoneResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ZoneManagerCreateZoneResult^ m_result;
    Windows::Foundation::Collections::IVectorView<Platform::String^>^ m_interfaceMemberSlaves;
};

public ref class ZoneManagerSetZoneLeadCalledEventArgs sealed
{
public:
    ZoneManagerSetZoneLeadCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ Platform::String^ interfaceMemberZoneId, _In_ Platform::String^ interfaceMemberTimeServerIp, _In_ uint16 interfaceMemberTimeServerPort);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ZoneManagerSetZoneLeadResult^ Result
    {
        ZoneManagerSetZoneLeadResult^ get() { return m_result; }
        void set(_In_ ZoneManagerSetZoneLeadResult^ value) { m_result = value; }
    }

    property Platform::String^ ZoneId
    {
        Platform::String^ get() { return m_interfaceMemberZoneId; }
    }

    property Platform::String^ TimeServerIp
    {
        Platform::String^ get() { return m_interfaceMemberTimeServerIp; }
    }

    property uint16 TimeServerPort
    {
        uint16 get() { return m_interfaceMemberTimeServerPort; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ZoneManagerSetZoneLeadResult^>^ GetResultAsync(ZoneManagerSetZoneLeadCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ZoneManagerSetZoneLeadResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ZoneManagerSetZoneLeadResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ZoneManagerSetZoneLeadResult^ m_result;
    Platform::String^ m_interfaceMemberZoneId;
    Platform::String^ m_interfaceMemberTimeServerIp;
    uint16 m_interfaceMemberTimeServerPort;
};

// Readable Properties
public ref class ZoneManagerGetEnabledRequestedEventArgs sealed
{
public:
    ZoneManagerGetEnabledRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ZoneManagerGetEnabledResult^ Result
    {
        ZoneManagerGetEnabledResult^ get() { return m_result; }
        void set(_In_ ZoneManagerGetEnabledResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ZoneManagerGetEnabledResult^>^ GetResultAsync(ZoneManagerGetEnabledRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ZoneManagerGetEnabledResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ZoneManagerGetEnabledResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ZoneManagerGetEnabledResult^ m_result;
};

public ref class ZoneManagerGetVersionRequestedEventArgs sealed
{
public:
    ZoneManagerGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property ZoneManagerGetVersionResult^ Result
    {
        ZoneManagerGetVersionResult^ get() { return m_result; }
        void set(_In_ ZoneManagerGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<ZoneManagerGetVersionResult^>^ GetResultAsync(ZoneManagerGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<ZoneManagerGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<ZoneManagerGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    ZoneManagerGetVersionResult^ m_result;
};

// Writable Properties
} } } 
