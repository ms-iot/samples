//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#include "pch.h"

using namespace Microsoft::WRL;
using namespace Platform;
using namespace Windows::Devices::AllJoyn;
using namespace Windows::Foundation;
using namespace net::allplay::ZoneManager;

void ZoneManagerSignals::Initialize(_In_ alljoyn_busobject busObject, _In_ alljoyn_sessionid sessionId)
{
    m_busObject = busObject;
    m_sessionId = sessionId;

    auto interfaceDefinition = alljoyn_busattachment_getinterface(alljoyn_busobject_getbusattachment(busObject), "net.allplay.ZoneManager");
    alljoyn_interfacedescription_getmember(interfaceDefinition, "EnabledChanged", &m_memberEnabledChanged);
    alljoyn_interfacedescription_getmember(interfaceDefinition, "OnZoneChanged", &m_memberOnZoneChanged);
    alljoyn_interfacedescription_getmember(interfaceDefinition, "PlayerReady", &m_memberPlayerReady);
    alljoyn_interfacedescription_getmember(interfaceDefinition, "SlaveOutOfData", &m_memberSlaveOutOfData);
    alljoyn_interfacedescription_getmember(interfaceDefinition, "SlaveState", &m_memberSlaveState);
}

void ZoneManagerSignals::EnabledChanged(_In_ bool interfaceMemberEnabled)
{
    if (nullptr == m_busObject)
    {
        return;
    }

    size_t argCount = 1;
    alljoyn_msgarg arguments = alljoyn_msgarg_array_create(argCount);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 0), "b", interfaceMemberEnabled);
    
    alljoyn_busobject_signal(
        m_busObject, 
        NULL,  // Generated code only supports broadcast signals.
        m_sessionId,
        m_memberEnabledChanged,
        arguments,
        argCount, 
        0, // A signal with a TTL of 0 will be sent to every member of the session, regardless of how long it takes to deliver the message
        ALLJOYN_MESSAGE_FLAG_GLOBAL_BROADCAST, // Broadcast to everyone in the session.
        NULL); // The generated code does not need the generated signal message

    alljoyn_msgarg_destroy(arguments);
}

void ZoneManagerSignals::CallEnabledChangedReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerEnabledChangedReceivedEventArgs^ args)
{
    EnabledChangedReceived(sender, args);
}

void ZoneManagerSignals::OnZoneChanged(_In_ Platform::String^ interfaceMemberZoneId, _In_ int32 interfaceMemberTimestamp, _In_ Windows::Foundation::Collections::IMapView<Platform::String^,int32>^ interfaceMemberSlaves)
{
    if (nullptr == m_busObject)
    {
        return;
    }

    size_t argCount = 3;
    alljoyn_msgarg arguments = alljoyn_msgarg_array_create(argCount);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 0), "s", interfaceMemberZoneId);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 1), "i", interfaceMemberTimestamp);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 2), "a{si}", interfaceMemberSlaves);
    
    alljoyn_busobject_signal(
        m_busObject, 
        NULL,  // Generated code only supports broadcast signals.
        m_sessionId,
        m_memberOnZoneChanged,
        arguments,
        argCount, 
        0, // A signal with a TTL of 0 will be sent to every member of the session, regardless of how long it takes to deliver the message
        ALLJOYN_MESSAGE_FLAG_GLOBAL_BROADCAST, // Broadcast to everyone in the session.
        NULL); // The generated code does not need the generated signal message

    alljoyn_msgarg_destroy(arguments);
}

void ZoneManagerSignals::CallOnZoneChangedReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerOnZoneChangedReceivedEventArgs^ args)
{
    OnZoneChangedReceived(sender, args);
}

void ZoneManagerSignals::PlayerReady(_In_ uint64 interfaceMemberResumeLatency)
{
    if (nullptr == m_busObject)
    {
        return;
    }

    size_t argCount = 1;
    alljoyn_msgarg arguments = alljoyn_msgarg_array_create(argCount);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 0), "t", interfaceMemberResumeLatency);
    
    alljoyn_busobject_signal(
        m_busObject, 
        NULL,  // Generated code only supports broadcast signals.
        m_sessionId,
        m_memberPlayerReady,
        arguments,
        argCount, 
        0, // A signal with a TTL of 0 will be sent to every member of the session, regardless of how long it takes to deliver the message
        ALLJOYN_MESSAGE_FLAG_GLOBAL_BROADCAST, // Broadcast to everyone in the session.
        NULL); // The generated code does not need the generated signal message

    alljoyn_msgarg_destroy(arguments);
}

void ZoneManagerSignals::CallPlayerReadyReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerPlayerReadyReceivedEventArgs^ args)
{
    PlayerReadyReceived(sender, args);
}

void ZoneManagerSignals::SlaveOutOfData()
{
    if (nullptr == m_busObject)
    {
        return;
    }

    size_t argCount = 0;
    alljoyn_msgarg arguments = alljoyn_msgarg_array_create(argCount);
    
    alljoyn_busobject_signal(
        m_busObject, 
        NULL,  // Generated code only supports broadcast signals.
        m_sessionId,
        m_memberSlaveOutOfData,
        arguments,
        argCount, 
        0, // A signal with a TTL of 0 will be sent to every member of the session, regardless of how long it takes to deliver the message
        ALLJOYN_MESSAGE_FLAG_GLOBAL_BROADCAST, // Broadcast to everyone in the session.
        NULL); // The generated code does not need the generated signal message

    alljoyn_msgarg_destroy(arguments);
}

void ZoneManagerSignals::CallSlaveOutOfDataReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerSlaveOutOfDataReceivedEventArgs^ args)
{
    SlaveOutOfDataReceived(sender, args);
}

void ZoneManagerSignals::SlaveState(_In_ int32 interfaceMemberTimestamp, _In_ Platform::String^ interfaceMemberState, _In_ Platform::String^ interfaceMemberUrl, _In_ uint64 interfaceMemberStartTime, _In_ uint64 interfaceMemberCurrentPosition, _In_ Platform::String^ interfaceMemberNextStream)
{
    if (nullptr == m_busObject)
    {
        return;
    }

    size_t argCount = 6;
    alljoyn_msgarg arguments = alljoyn_msgarg_array_create(argCount);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 0), "i", interfaceMemberTimestamp);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 1), "s", interfaceMemberState);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 2), "s", interfaceMemberUrl);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 3), "t", interfaceMemberStartTime);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 4), "t", interfaceMemberCurrentPosition);
    (void)TypeConversionHelpers::SetAllJoynMessageArg(alljoyn_msgarg_array_element(arguments, 5), "s", interfaceMemberNextStream);
    
    alljoyn_busobject_signal(
        m_busObject, 
        NULL,  // Generated code only supports broadcast signals.
        m_sessionId,
        m_memberSlaveState,
        arguments,
        argCount, 
        0, // A signal with a TTL of 0 will be sent to every member of the session, regardless of how long it takes to deliver the message
        ALLJOYN_MESSAGE_FLAG_GLOBAL_BROADCAST, // Broadcast to everyone in the session.
        NULL); // The generated code does not need the generated signal message

    alljoyn_msgarg_destroy(arguments);
}

void ZoneManagerSignals::CallSlaveStateReceived(_In_ ZoneManagerSignals^ sender, _In_ ZoneManagerSlaveStateReceivedEventArgs^ args)
{
    SlaveStateReceived(sender, args);
}

