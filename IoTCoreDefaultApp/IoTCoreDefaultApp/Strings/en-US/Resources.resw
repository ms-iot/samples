<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IoTCoreHeaderText" xml:space="preserve">
    <value>Windows 10 IoT Core</value>
    <comment>The Operating System Name</comment>
  </data>
  <data name="GenericBoardName" xml:space="preserve">
    <value>IoTCore Board</value>
    <comment>A generic board name</comment>
  </data>
  <data name="MainPageDeviceNameText" xml:space="preserve">
    <value>Device name</value>
    <comment>Field label</comment>
  </data>
  <data name="MainPageNetworkText" xml:space="preserve">
    <value>Network</value>
    <comment>Field label</comment>
  </data>
  <data name="MBMName" xml:space="preserve">
    <value>MinnowBoard Max</value>
    <comment>Board name</comment>
  </data>
  <data name="RestartText" xml:space="preserve">
    <value>Restart</value>
    <comment>Restart entry in the shutdown menu</comment>
  </data>
  <data name="ShutdownText" xml:space="preserve">
    <value>Shutdown</value>
    <comment>Shutdown entry in the shutdown menu</comment>
  </data>
  <data name="BackButtonContent" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="CancelButtonContent" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ConnectAutomaticallyText" xml:space="preserve">
    <value>Connect automatically</value>
  </data>
  <data name="ConnectButtonContent" xml:space="preserve">
    <value>Connect</value>
  </data>
  <data name="DirectConnectionsText" xml:space="preserve">
    <value>Direct connections</value>
  </data>
  <data name="EthernetText" xml:space="preserve">
    <value>Ethernet</value>
    <comment>Field label</comment>
  </data>
  <data name="NetworkConnectingMessageText" xml:space="preserve">
    <value>Checking network requirements</value>
  </data>
  <data name="NetworkPasswordPromptText" xml:space="preserve">
    <value>Enter the network security key</value>
  </data>
  <data name="NextButtonContent" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NoNetworksText" xml:space="preserve">
    <value>None found</value>
  </data>
  <data name="OOBEIntroText" xml:space="preserve">
    <value>Let's get some basic stuff out of the way.</value>
  </data>
  <data name="OOBELanguageSelectText" xml:space="preserve">
    <value>Choose your language</value>
  </data>
  <data name="OOBENetworkTitleText" xml:space="preserve">
    <value>Let's get connected</value>
  </data>
  <data name="OOBEWelcomeTitleText" xml:space="preserve">
    <value>Hi there, welcome to the Windows 10 IoT Core</value>
  </data>
  <data name="Rpi2Name" xml:space="preserve">
    <value>Raspberry Pi 2</value>
    <comment>Board name</comment>
  </data>
  <data name="Rpi3Name" xml:space="preserve">
    <value>Raspberry Pi 3</value>
    <comment>Board name</comment>
  </data>
  <data name="DB410Name" xml:space="preserve">
    <value>DragonBoard 410c</value>
    <comment>Board name</comment>
  </data>
  <data name="SkipStepText" xml:space="preserve">
    <value>Skip this step</value>
  </data>
  <data name="WifiText" xml:space="preserve">
    <value>Wi-Fi</value>
    <comment>Label for Wi-Fi list in options page</comment>
  </data>
  <data name="StartDevelopingText" xml:space="preserve">
    <value> to start developing</value>
    <comment>Part of "Visit www.windowsondevices.com to start developing"</comment>
  </data>
  <data name="VisitText" xml:space="preserve">
    <value>Visit</value>
    <comment>Part of "Visit www.windowsondevices.com to start developing"</comment>
  </data>
  <data name="WindowsOnDevicesUrlText" xml:space="preserve">
    <value> www.windowsondevices.com</value>
    <comment>Part of "Visit www.windowsondevices.com to start developing"</comment>
  </data>
  <data name="KeyboardTitleText" xml:space="preserve">
    <value>Keyboard layout</value>
    <comment>Field label</comment>
  </data>
  <data name="LanguageTitleText" xml:space="preserve">
    <value>Language</value>
    <comment>Field label</comment>
  </data>
  <data name="NetworkConnectedText" xml:space="preserve">
    <value>Connected</value>
  </data>
  <data name="NetworkPreferencesText" xml:space="preserve">
    <value>Network &amp; Wi-Fi</value>
  </data>
  <data name="BluetoothPreferencesText" xml:space="preserve">
    <value>Bluetooth</value>
    <comment>Label for Setting item tp control Bluetooth pairing</comment>
  </data>
  <data name="SettingsPreferencesText" xml:space="preserve">
    <value>Basic preferences</value>
  </data>
  <data name="SettingsTitleText" xml:space="preserve">
    <value>Device settings</value>
  </data>
  <data name="TimeZoneTitleText" xml:space="preserve">
    <value>Time zone</value>
  </data>
  <data name="DeviceInfoText" xml:space="preserve">
    <value>Device info</value>
  </data>
  <data name="TutorialsText" xml:space="preserve">
    <value>Tutorials</value>
    <comment>Text under the Tutorials button on the top bar</comment>
  </data>
  <data name="ConnectedDevicesText" xml:space="preserve">
    <value>Connected devices</value>
  </data>
  <data name="Ipv4Text" xml:space="preserve">
    <value>IPv4</value>
    <comment>Field label</comment>
  </data>
  <data name="Ipv6Text" xml:space="preserve">
    <value>IPv6</value>
    <comment>Field label</comment>
  </data>
  <data name="MainPageIPAddressText" xml:space="preserve">
    <value>IP address</value>
    <comment>Field label</comment>
  </data>
  <data name="NetworkInformationText" xml:space="preserve">
    <value>NETWORK INFORMATION</value>
  </data>
  <data name="StatusText" xml:space="preserve">
    <value>Status</value>
    <comment>Status of the network connection (e.g. not connected, limited, etc.)</comment>
  </data>
  <data name="TutorialGetCodingDescriptionText" xml:space="preserve">
    <value>Learn how to write code remotely from your PC</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialGetCodingTitleText" xml:space="preserve">
    <value>Get Coding</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialGetConnectedDescriptionText" xml:space="preserve">
    <value>Connect your device to the internet and to your PC</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialGetConnectedTitleText" xml:space="preserve">
    <value>Get Connected</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialGetStartedDescriptionText" xml:space="preserve">
    <value>Get introduced to Windows 10 IoT Core</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialGetStartedTitleText" xml:space="preserve">
    <value>Get Started</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialHeaderText" xml:space="preserve">
    <value>Learn how to make the most of Windows 10 IoT Core</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialHelloBlinkyDescriptionText" xml:space="preserve">
    <value>Toggle an LED on your device</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialHelloBlinkyTitleText" xml:space="preserve">
    <value>Hello Blinky</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialTitleText" xml:space="preserve">
    <value>Resources and tools to help you get connected and developing</value>
  </data>
  <data name="TutorialBlinkyBody1Text" xml:space="preserve">
    <value>The first, and most basic thing a board should do is blink.</value>
  </data>
  <data name="TutorialBlinkyBody2Text" xml:space="preserve">
    <value>As mentioned in the "Get Started" section, all of the source code for this is open source and is available on www.windowsondevices.com (look for the IoTCoreDefaultApp).</value>
  </data>
  <data name="TutorialBlinkyBody3Text" xml:space="preserve">
    <value>No set up is required. Just press start.</value>
  </data>
  <data name="TutorialBlinkyBody4Text" xml:space="preserve">
    <value>You can also change the frequency of the blinking. Feel free to gather all of your friends and have a dance party around your device.</value>
  </data>
  <data name="TutorialBlinkyBody5Text" xml:space="preserve">
    <value>Disclaimer: Microsoft takes no responsibility for whatever damage may be caused by hosting such a huge rave of a party using the small blinking LED on your board.</value>
  </data>
  <data name="TutorialBlinkyBody6Text_Rpi3" xml:space="preserve">
    <value>For Raspberry Pi 3, connect an LED to GPIO pin 5.</value>
  </data>
  <data name="TutorialBlinkyBody6Text_Dragonboard" xml:space="preserve">
    <value>For DragonBoard 410c, connect an LED to GPIO pin 115.</value>
  </data>
  <data name="TutorialBlinkyTitle1Text" xml:space="preserve">
    <value>Hello Blinky</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="TutorialBlinkyTitle2Text" xml:space="preserve">
    <value>Make your board blink</value>
    <comment>Tutorial titles and subtitles</comment>
  </data>
  <data name="MainPageOSVersionText" xml:space="preserve">
    <value>OS Version</value>
    <comment>Label for OS Version field in main page</comment>
  </data>
  <data name="OSVersionNotAvailable" xml:space="preserve">
    <value>Not Available</value>
    <comment>Text shown when we cannot retrieve the OS Version</comment>
  </data>
  <data name="RefreshContent" xml:space="preserve">
    <value>Refresh</value>
    <comment>Refresh button</comment>
  </data>
  <data name="Tutorial.GetStarted.001.620x400.image" xml:space="preserve">
    <value>Assets/Tutorials/GetStarted-{0}.jpg</value>
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetStarted.002.title" xml:space="preserve">
    <value>Getting Started</value>
  </data>
  <data name="Tutorial.GetStarted.003.subtitle" xml:space="preserve">
    <value>Welcome to Windows 10 IoT Core</value>
  </data>
  <data name="Tutorial.GetStarted.004.h1" xml:space="preserve">
    <value>Intro</value>
  </data>
  <data name="Tutorial.GetStarted.005.p" xml:space="preserve">
    <value>Congrats! You’ve set up your board and you’re ready to explore Windows 10 IoT Core; a light weight operating system designed to let you create devices. With IoT Core, Windows brings you all of the tools you need to get your device connected and running in no time. Our goal is to get your ideas made into a reality as quickly possible.</value>
  </data>
  <data name="Tutorial.GetStarted.006.p" xml:space="preserve">
    <value>If you want to dig deeper and explore tutorials, documentation and help, visit www.windowsondevices.com.</value>
  </data>
  <data name="Tutorial.GetStarted.007.h1" xml:space="preserve">
    <value>How do I get coding?</value>
  </data>
  <data name="Tutorial.GetStarted.008.p" xml:space="preserve">
    <value>Windows 10 IoT Core uses the power of the PC to build projects.</value>
  </data>
  <data name="Tutorial.GetStarted.009.p" xml:space="preserve">
    <value>All of your coding is done remotely through Visual Studio. We make it easy to push your code to your device for testing, and when they’re ready to be shipped.</value>
  </data>
  <data name="Tutorial.GetStarted.010.h1" xml:space="preserve">
    <value>What you need</value>
  </data>
  <data name="Tutorial.GetStarted.011.ul" xml:space="preserve">
    <value>A Windows 10 PC</value>
  </data>
  <data name="Tutorial.GetStarted.012.ul" xml:space="preserve">
    <value>Internet Connection</value>
  </data>
  <data name="Tutorial.GetStarted.013.ul" xml:space="preserve">
    <value>Your Board</value>
  </data>
  <data name="Tutorial.GetStarted.014.ul" xml:space="preserve">
    <value>Visual Studio 2015</value>
  </data>
  <data name="Tutorial.GetStarted.014a.br" xml:space="preserve">
    <value />
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetStarted.015.p" xml:space="preserve">
    <value>Click on the “Get Coding” tutorial for more information</value>
  </data>
  <data name="Tutorial.GetStarted.016.h1" xml:space="preserve">
    <value>Where’s the Start button?!</value>
  </data>
  <data name="Tutorial.GetStarted.017.p" xml:space="preserve">
    <value>Windows 10 IoT Core has been designed to be extremely lightweight, and invisible to the user after you finish building your application. This means no shell and no start button. All of the buttons, navigation and UI has to come from you, the developer.</value>
  </data>
  <data name="Tutorial.GetStarted.018.p" xml:space="preserve">
    <value>But don’t worry, we’re here to help.</value>
  </data>
  <data name="Tutorial.GetStarted.019.p" xml:space="preserve">
    <value>This application is entirely open source! Everything you see in the application is open sourced and can be found at www.windowsondevices.com.</value>
  </data>
  <data name="Tutorial.GetStarted.020.p" xml:space="preserve">
    <value>Feel free to use this as a template to get started when building your own application</value>
  </data>
  <data name="Tutorial.GetStarted.021.br" xml:space="preserve">
    <value />
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetConnected.001.620x400.image" xml:space="preserve">
    <value>Assets/Tutorials/GetConnected-{0}.jpg</value>
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetConnected.002.title" xml:space="preserve">
    <value>Get Connected</value>
  </data>
  <data name="Tutorial.GetConnected.003.subtitle" xml:space="preserve">
    <value>Internet of Things (IoT) wouldn’t be much without the Internet part of it, so let’s try and get connected.</value>
  </data>
  <data name="Tutorial.GetConnected.004.p" xml:space="preserve">
    <value>There are three ways to get connected: Ethernet, Wi-Fi, and Internet Connection Sharing (ICS)</value>
  </data>
  <data name="Tutorial.GetConnected.005.h1" xml:space="preserve">
    <value>Ethernet</value>
  </data>
  <data name="Tutorial.GetConnected.006.p" xml:space="preserve">
    <value>The easiest, and most reliable way to get connected is to use Ethernet. Plug an Ethernet cable into your board and connect it to your router or network switch.</value>
  </data>
  <data name="Tutorial.GetConnected.007.h1" xml:space="preserve">
    <value>Wi-Fi</value>
  </data>
  <data name="Tutorial.GetConnected.008.p" xml:space="preserve">
    <value>Although some boards come with built in Wi-Fi, most do not. If your board does not have built in Wi-fi and you’ll have to purchase a USB Wi-Fi Adapter and plug it into your board. Feel free to run to the store. I’ll wait.</value>
  </data>
  <data name="Tutorial.GetConnected.009.p" xml:space="preserve">
    <value>Got one? Awesome, plug it in!</value>
  </data>
  <data name="Tutorial.GetConnected.010.620x350.image" xml:space="preserve">
    <value>Assets/Tutorials/GetConnected-004.jpg</value>
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetConnected.011.p" xml:space="preserve">
    <value>In the top right hand corner of your screen is a “settings gear”. Click the gear and navigate to Network and Wi-Fi. Here you can connect to your local network.</value>
  </data>
  <data name="Tutorial.GetConnected.012.h1" xml:space="preserve">
    <value>Internet Connection Sharing</value>
  </data>
  <data name="Tutorial.GetConnected.013.p" xml:space="preserve">
    <value>In order to connect and share the internet connection in your PC with your IoT Core device, you must have the following:</value>
  </data>
  <data name="Tutorial.GetConnected.014.ul" xml:space="preserve">
    <value>A spare Ethernet port on your development machine. This can be either an extra PCI Ethernet card or a USB-to-Ethernet dongle.</value>
  </data>
  <data name="Tutorial.GetConnected.015.ul" xml:space="preserve">
    <value>An Ethernet cable to link your development machine to your IoT Core device.</value>
  </data>
  <data name="Tutorial.GetConnected.015a.br" xml:space="preserve">
    <value />
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetConnected.016.p" xml:space="preserve">
    <value>Follow the instructions below to enable Internet Connection Sharing (ICS) on your PC</value>
  </data>
  <data name="Tutorial.GetConnected.017.ul" xml:space="preserve">
    <value>Open up the control panel by right-clicking on the Windows button and selecting 'Control Panel', or by opening up a command prompt window and typing 'control.exe'</value>
  </data>
  <data name="Tutorial.GetConnected.018.ul" xml:space="preserve">
    <value>In the search box of the control panel, type adapter</value>
  </data>
  <data name="Tutorial.GetConnected.019.ul" xml:space="preserve">
    <value>Under 'Network and Sharing Center', click 'View network connections'</value>
  </data>
  <data name="Tutorial.GetConnected.020.ul" xml:space="preserve">
    <value>Right-click the connection that you want to share, and click 'Properties'</value>
  </data>
  <data name="Tutorial.GetConnected.021.ul" xml:space="preserve">
    <value>Click the 'Sharing' tab, and select the 'Allow other network users to connect through this computer’s Internet connection' box.</value>
  </data>
  <data name="Tutorial.GetConnected.021a.br" xml:space="preserve">
    <value />
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetConnected.022.p" xml:space="preserve">
    <value>After you have enabled ICS on your PC, you can now connect your Windows 10 IoT Core device directly to your PC. You can do it by plugging in one end of the spare Ethernet cable to the extra Ethernet port on your PC, and the other end of the cable to the Ethernet port on your IoT Core device.</value>
  </data>
  <data name="Tutorial.GetConnected.023.p" xml:space="preserve">
    <value>Note:</value>
  </data>
  <data name="Tutorial.GetConnected.024.ul" xml:space="preserve">
    <value>The 'Sharing' tab won’t be available if you have only one network connection.</value>
  </data>
  <data name="Tutorial.GetConnected.024a.br" xml:space="preserve">
    <value />
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetConnected.025.h1" xml:space="preserve">
    <value>Having Troubles?</value>
  </data>
  <data name="Tutorial.GetConnected.026.p" xml:space="preserve">
    <value>We’ve added some advanced network diagnostics into the main page to help you debug your problems. For more support, go to www.windowsondevices.com</value>
  </data>
  <data name="Tutorial.GetConnected.027.620x400.image" xml:space="preserve">
    <value>Assets/Tutorials/GetConnected-006.jpg</value>
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetConnected.028.br" xml:space="preserve">
    <value />
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetCoding.001.620x400.image" xml:space="preserve">
    <value>Assets/Tutorials/GetCoding.jpg</value>
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetCoding.002.title" xml:space="preserve">
    <value>Get Coding</value>
  </data>
  <data name="Tutorial.GetCoding.003.subtitle" xml:space="preserve">
    <value>Windows 10 IoT Core uses the power of the PC to build projects.</value>
  </data>
  <data name="Tutorial.GetCoding.004.p" xml:space="preserve">
    <value>All of your coding is done remotely through Visual Studio. We make it easy to push your code to your device for testing, and when they’re ready to be shipped.</value>
  </data>
  <data name="Tutorial.GetCoding.005.h1" xml:space="preserve">
    <value>What you need</value>
  </data>
  <data name="Tutorial.GetCoding.006.ul" xml:space="preserve">
    <value>A Windows 10 PC</value>
  </data>
  <data name="Tutorial.GetCoding.007.ul" xml:space="preserve">
    <value>Internet Connection</value>
  </data>
  <data name="Tutorial.GetCoding.008.ul" xml:space="preserve">
    <value>Your Board</value>
  </data>
  <data name="Tutorial.GetCoding.009.ul" xml:space="preserve">
    <value>Visual Studio 2015</value>
  </data>
  <data name="Tutorial.GetCoding.009a.br" xml:space="preserve">
    <value />
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetCoding.010.h1" xml:space="preserve">
    <value>Setting up Visual Studio 2015 on your PC</value>
  </data>
  <data name="Tutorial.GetCoding.012.ul" xml:space="preserve">
    <value>Install Windows 10</value>
  </data>
  <data name="Tutorial.GetCoding.013.ul" xml:space="preserve">
    <value>Install Visual Studio 2015. Choose the Custom option when you kick off the installer, and then check the option to install the Windows 10 tools.</value>
  </data>
  <data name="Tutorial.GetCoding.014.ul" xml:space="preserve">
    <value>If you are planning to develop drivers, install the WDK.</value>
  </data>
  <data name="Tutorial.GetCoding.016a.br" xml:space="preserve">
    <value />
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="Tutorial.GetCoding.019.br" xml:space="preserve">
    <value />
    <comment>Please do NOT localize this string</comment>
  </data>
  <data name="NetworkConnectivityLevel_ConstrainedInternetAccess" xml:space="preserve">
    <value>Limited Internet access</value>
  </data>
  <data name="NetworkConnectivityLevel_InternetAccess" xml:space="preserve">
    <value>Local and Internet access</value>
  </data>
  <data name="NetworkConnectivityLevel_LocalAccess" xml:space="preserve">
    <value>Local network access only</value>
  </data>
  <data name="NetworkConnectivityLevel_None" xml:space="preserve">
    <value>No connectivity</value>
  </data>
  <data name="NoInternetConnection" xml:space="preserve">
    <value>&lt;no Internet connection&gt;</value>
    <comment>Used in the main page under "IP address"</comment>
  </data>
  <data name="DefaultLanguageTimeoutText" xml:space="preserve">
    <value>We're choosing the default language automatically...</value>
  </data>
  <data name="BlinkyStart" xml:space="preserve">
    <value>START</value>
  </data>
  <data name="BlinkyStop" xml:space="preserve">
    <value>STOP</value>
  </data>
  <data name="BlinkyStopped" xml:space="preserve">
    <value>Stopped</value>
    <comment>This message is shown when the user turn off the slider to make the LED blink</comment>
  </data>
  <data name="GPIOPinInitializedCorrectly" xml:space="preserve">
    <value>GPIO pin initialized correctly.</value>
  </data>
  <data name="NoGPIOController" xml:space="preserve">
    <value>There is no GPIO controller on this device.</value>
  </data>
  <data name="ProblemsInitializingGPIOPin" xml:space="preserve">
    <value>There were problems initializing the GPIO pin.</value>
  </data>
  <data name="BluetoothAttemptingToPairFormat" xml:space="preserve">
    <value>Attempting to pair with {0} ({1})</value>
    <comment>Format string for message displayed when pairing attempt starts</comment>
  </data>
  <data name="BluetoothConfirmOnlyFormat" xml:space="preserve">
    <value>Pairing with {0} ({1})</value>
    <comment>Format string for message displayed when ConfirmOnly ceremony is invoked</comment>
  </data>
  <data name="BluetoothConfirmPinMatchFormat" xml:space="preserve">
    <value>Does the PIN shown on the device match {0} ?</value>
    <comment>Format string for message displayed when ConfirmPinMatch ceremony is invoked</comment>
  </data>
  <data name="BluetoothDisplayPinFormat" xml:space="preserve">
    <value>Please enter this PIN on the device you are pairing with: {0}</value>
    <comment>Format string for message displayed when DisplayPin ceremony is invoked</comment>
  </data>
  <data name="BluetoothInboundRegistrationAlreadyDoneFormat" xml:space="preserve">
    <value>Already registered for inbound pairing, supported ceremonies: {0}</value>
    <comment>Format string for message displayed when Inbound pairing handler registration already done</comment>
  </data>
  <data name="BluetoothInboundRegistrationFailed" xml:space="preserve">
    <value>Failed to register for inbound pairing</value>
    <comment>Message displayed when Inbound pairing handler registration fails</comment>
  </data>
  <data name="BluetoothInboundRegistrationSucceededFormat" xml:space="preserve">
    <value>Successfully registered for inbound pairing, supported ceremonies: {0}</value>
    <comment>Format string for message displayed when Inbound pairing handler registration succeeds</comment>
  </data>
  <data name="BluetoothPairingFailureFormat" xml:space="preserve">
    <value>Pairing result was {0}: Failed to pair with {1} ({2})</value>
    <comment>Format string for message displayed when pairing attempt fails</comment>
  </data>
  <data name="BluetoothPairingSuccessFormat" xml:space="preserve">
    <value>Successfuly paired with {0} ({1})</value>
    <comment>Format string for message displayed when pairing attempt succeeds</comment>
  </data>
  <data name="BluetoothStartedWatching" xml:space="preserve">
    <value>Your device is searching for and can be discovered by other Bluetooth devices</value>
    <comment>Message display when "Start Watcher" button is pressed</comment>
  </data>
  <data name="BluetoothStoppedWatching" xml:space="preserve">
    <value>Stopped watching for Bluetooth devices</value>
    <comment>Message display when "Stop Watcher" button is pressed</comment>
  </data>
  <data name="BluetoothUnpairingFailureFormat" xml:space="preserve">
    <value>Unpairing result was {0}: Failed to unpair from {1} ({2})</value>
    <comment>Format string for message displayed when unpairing attempt fails</comment>
  </data>
  <data name="BluetoothUnpairingSuccessFormat" xml:space="preserve">
    <value>Successfuly unpaired from {0} ({1})</value>
    <comment>Format string for message displayed when unpairing attempt succeeds</comment>
  </data>
  <data name="PinLabelTextBox.Text" xml:space="preserve">
    <value>Enter PIN:</value>
    <comment>Message on flyout control for PIN entry for ProvidePin ceremony</comment>
  </data>
  <data name="BluetoothPairButtonContent" xml:space="preserve">
    <value>Pair</value>
    <comment>Text displayed on the button to pair Bluetooth list item</comment>
  </data>
  <data name="BluetoothUnpairButtonContent" xml:space="preserve">
    <value>Unpair</value>
    <comment>Text displayed on the button to unpair Bluetooth list item</comment>
  </data>
  <data name="BluetoothDeviceStatePairedText" xml:space="preserve">
    <value>Paired</value>
  </data>
  <data name="BluetoothDeviceStateReadyToPairText" xml:space="preserve">
    <value>Ready to pair</value>
  </data>
  <data name="BluetoothManageDevicesText" xml:space="preserve">
    <value>Manage Bluetooth Devices</value>
  </data>
  <data name="BluetoothWatcherToggleLabel" xml:space="preserve">
    <value>Bluetooth</value>
    <comment>Label text for Bluetooth watcher toggle switch</comment>
  </data>
  <data name="BluetoothNoDeviceAvailableFormat" xml:space="preserve">
    <value>No usable Bluetooth adapter can be found on this computer:
{0}</value>
    <comment>Message displayed on systems which do not have a Bluetooth adapter. The new line before {0} is deliberate and should be kept</comment>
  </data>
  <data name="BluetoothEnterPINText" xml:space="preserve">
    <value>Enter the PIN:</value>
  </data>
  <data name="BluetoothDeviceStateUnknownText" xml:space="preserve">
    <value>Unknown state</value>
  </data>
  <data name="BluetoothInboundPairingRequestFormat" xml:space="preserve">
    <value>Inbound request: {0}
{1}</value>
    <comment>Format for message displayed when an inbounbd pairing request is received</comment>
  </data>
  <data name="EnableScreensaverText" xml:space="preserve">
    <value>Screensaver</value>
    <comment>Toggle switch for enabling the screensaver</comment>
  </data>
  <data name="NoDeviceName" xml:space="preserve">
    <value>&lt;no device name&gt;</value>
    <comment>This is shown when we fail to retrieve a valid device name (very strange case)</comment>
  </data>
  <data name="CommandLineText" xml:space="preserve">
    <value>Command line</value>
    <comment>Title for command line page</comment>
  </data>
  <data name="CommandLinePlaceholderText" xml:space="preserve">
    <value>{0}&gt; Enter command line</value>
    <comment>Placeholder for command line input text box</comment>
  </data>
  <data name="ClearPageText" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="CdNotSupported" xml:space="preserve">
    <value>Change Directory not currently supported. Please use full paths in your commands.</value>
  </data>
  <data name="CmdNotEnabled" xml:space="preserve">
    <value>Your device is not allowed to run the command line processor.
To enable it, run the following command as "Administrator" on your device:

    reg ADD "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\EmbeddedMode\ProcessLauncher" /v AllowedExecutableFilesList /t REG_MULTI_SZ /d "c:\windows\system32\cmd.exe\0"

Alternatively, click the button below to enter the administrator's username/password and attempt to execute the command.

    </value>
    <comment>New lines need to be preserved</comment>
  </data>
  <data name="ExecAsDefaultAccount" xml:space="preserve">
    <value>Executing commands as DefaultAccount
    </value>
  </data>
  <data name="CloseText" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="EnableCmdText" xml:space="preserve">
    <value>Enable Command Line Processor</value>
  </data>
  <data name="UsernameText" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="PasswordText" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="CmdTextEnabledSuccess" xml:space="preserve">
    <value>Successfully enabled Command Line Processor (cmd.exe) on your device.</value>
  </data>
  <data name="CmdTextEnabledFailure" xml:space="preserve">
    <value>Failed to enable Command Line Processor (cmd.exe) on your device. Status = {0}</value>
  </data>
  <data name="DisconnectButtonContent" xml:space="preserve">
    <value>Disconnect</value>
    <comment>This disconnects the connected network</comment>
  </data>
  <data name="VirtualNetworkAdapter" xml:space="preserve">
    <value>Virtual Network Adapter</value>
  </data>
  <data name="CortanaAboutMeText" xml:space="preserve">
    <value>About Me</value>
    <comment>Button launches Cortana's "About Me" page to manage certain Cortana Settings</comment>
  </data>
  <data name="CortanaTitleText" xml:space="preserve">
    <value>Manage Cortana Settings</value>
    <comment>Title of Cortana Settings Management Page</comment>
  </data>
  <data name="CortanaPreferencesText" xml:space="preserve">
    <value>Cortana</value>
    <comment>Cortana Preferences on left side of settings screen</comment>
  </data>
  <data name="CortanaVoiceActivationText" xml:space="preserve">
    <value>Let Cortana respond to "Hey Cortana"</value>
    <comment>Toggle switch for enabling voice activation.</comment>
  </data>
</root>